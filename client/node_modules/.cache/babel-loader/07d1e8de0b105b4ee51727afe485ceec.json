{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/ticketlist.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getTickets } from '../actions/ticketActions';\nimport PropTypes from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport LoadingScreen from './loadingscreen';\n\nclass TicketList extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.showDetails = path => {\n      this.props.history.push(path);\n    };\n  }\n\n  sortTable(n) {\n    var table,\n        rows,\n        switching,\n        i,\n        x,\n        y,\n        shouldSwitch,\n        dir,\n        switchcount = 0;\n    table = document.getElementById(\"myTable2\");\n    switching = true; // Set the sorting direction to ascending:\n\n    dir = \"asc\";\n    /* Make a loop that will continue until\n    no switching has been done: */\n\n    while (switching) {\n      // Start by saying: no switching is done:\n      switching = false;\n      rows = table.rows;\n      /* Loop through all table rows (except the\n      first, which contains table headers): */\n\n      for (i = 1; i < rows.length - 1; i++) {\n        // Start by saying there should be no switching:\n        shouldSwitch = false;\n        /* Get the two elements you want to compare,\n        one from current row and one from the next: */\n\n        x = rows[i].getElementsByTagName(\"TD\")[n];\n        y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n        /* Check if the two rows should switch place,\n        based on the direction, asc or desc: */\n\n        if (dir == \"asc\") {\n          if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n            // If so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        } else if (dir == \"desc\") {\n          if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n            // If so, mark as a switch and break the loop:\n            shouldSwitch = true;\n            break;\n          }\n        }\n      }\n\n      if (shouldSwitch) {\n        /* If a switch has been marked, make the switch\n        and mark that a switch has been done: */\n        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n        switching = true; // Each time a switch is done, increase this count by 1:\n\n        switchcount++;\n      } else {\n        /* If no switching has been done AND the direction is \"asc\",\n        set the direction to \"desc\" and run the while loop again. */\n        if (switchcount == 0 && dir == \"asc\") {\n          dir = \"desc\";\n          switching = true;\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.props.getTickets('', '');\n  }\n\n  render() {\n    const {\n      tickets\n    } = this.props.ticket;\n    const {\n      loading\n    } = this.props.ticket;\n\n    if (loading === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LoadingScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }\n      }));\n    } else if (tickets.length < 1) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }\n      }, \"No results found\");\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Table, {\n        className: \"my-4\",\n        striped: true,\n        bordered: true,\n        hover: true,\n        responsive: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        onClick: sortTable(0),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 33\n        }\n      }, \"Title\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 33\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 33\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 33\n        }\n      }, \"Open?\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 33\n        }\n      }, \"Author\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 33\n        }\n      }, \"Assigned To\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 33\n        }\n      }, \"Created\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 33\n        }\n      }, \"Last Modified\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }, tickets.map(ticket => /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"ticket\",\n        key: ticket._id,\n        onClick: () => this.showDetails(`/tickets/${ticket._id}`),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 37\n        }\n      }, ticket.title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 37\n        }\n      }, ticket.description.substring(0, 25)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 37\n        }\n      }, ticket.status), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 37\n        }\n      }, ticket.open === true ? 'Open' : 'Closed'), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 37\n        }\n      }, ticket.author.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 37\n        }\n      }, ticket.assignedTo.name), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 37\n        }\n      }, ticket.createdAt.substring(0, 19)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 37\n        }\n      }, ticket.updatedAt.substring(0, 19)))))));\n    }\n  }\n\n}\n\nTicketList.propTypes = {\n  getTickets: PropTypes.func.isRequired,\n  ticket: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  ticket: state.ticket\n});\n\nexport default connect(mapStateToProps, {\n  getTickets\n})(withRouter(TicketList));","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/ticketlist.js"],"names":["React","Component","connect","getTickets","PropTypes","Table","withRouter","LoadingScreen","TicketList","showDetails","path","props","history","push","sortTable","n","table","rows","switching","i","x","y","shouldSwitch","dir","switchcount","document","getElementById","length","getElementsByTagName","innerHTML","toLowerCase","parentNode","insertBefore","componentDidMount","render","tickets","ticket","loading","map","_id","title","description","substring","status","open","author","name","assignedTo","createdAt","updatedAt","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getTickets } from '../actions/ticketActions';\nimport PropTypes from 'prop-types';\nimport { Table } from 'react-bootstrap';\nimport { withRouter } from 'react-router-dom';\nimport LoadingScreen from './loadingscreen';\n\nclass TicketList extends Component {\n\n    sortTable(n) {\n        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;\n        table = document.getElementById(\"myTable2\");\n        switching = true;\n        // Set the sorting direction to ascending:\n        dir = \"asc\"; \n        /* Make a loop that will continue until\n        no switching has been done: */\n        while (switching) {\n          // Start by saying: no switching is done:\n          switching = false;\n          rows = table.rows;\n          /* Loop through all table rows (except the\n          first, which contains table headers): */\n          for (i = 1; i < (rows.length - 1); i++) {\n            // Start by saying there should be no switching:\n            shouldSwitch = false;\n            /* Get the two elements you want to compare,\n            one from current row and one from the next: */\n            x = rows[i].getElementsByTagName(\"TD\")[n];\n            y = rows[i + 1].getElementsByTagName(\"TD\")[n];\n            /* Check if the two rows should switch place,\n            based on the direction, asc or desc: */\n            if (dir == \"asc\") {\n              if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n                // If so, mark as a switch and break the loop:\n                shouldSwitch = true;\n                break;\n              }\n            } else if (dir == \"desc\") {\n              if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {\n                // If so, mark as a switch and break the loop:\n                shouldSwitch = true;\n                break;\n              }\n            }\n          }\n          if (shouldSwitch) {\n            /* If a switch has been marked, make the switch\n            and mark that a switch has been done: */\n            rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n            switching = true;\n            // Each time a switch is done, increase this count by 1:\n            switchcount ++; \n          } else {\n            /* If no switching has been done AND the direction is \"asc\",\n            set the direction to \"desc\" and run the while loop again. */\n            if (switchcount == 0 && dir == \"asc\") {\n              dir = \"desc\";\n              switching = true;\n            }\n          }\n        }\n      }\n\n    componentDidMount() {\n        this.props.getTickets('', '');\n    }\n\n    showDetails = (path) => {\n        this.props.history.push(path);\n    }\n\n    render() {\n        const { tickets } = this.props.ticket;\n        const { loading } = this.props.ticket;\n        if (loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else if (tickets.length < 1) {\n            return (\n                <div>\n                    No results found\n                </div>\n            )\n        } else {\n            return (\n                <div className='container'>\n                    <Table className='my-4' striped bordered hover responsive='md'>\n                        <thead>\n                            <tr>\n                                <td onClick={sortTable(0)}>Title</td>\n                                <td>Description</td>\n                                <td>Status</td>\n                                <td>Open?</td>\n                                <td>Author</td> \n                                <td>Assigned To</td>\n                                <td>Created</td>\n                                <td>Last Modified</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {tickets.map(ticket => (\n                            <tr className='ticket' key={ticket._id} onClick={() => this.showDetails(`/tickets/${ticket._id}`)}>\n                                    <td>{ticket.title}</td>\n                                    <td>{ticket.description.substring(0, 25)}</td>\n                                    <td>{ticket.status}</td>\n                                    <td>{(ticket.open === true) ? 'Open' : 'Closed'}</td>\n                                    <td>{ticket.author.name}</td>\n                                    <td>{ticket.assignedTo.name}</td>\n                                    <td>{ticket.createdAt.substring(0,19)}</td>\n                                    <td>{ticket.updatedAt.substring(0,19)}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        }   \n    }\n}\n\nTicketList.propTypes = {\n    getTickets: PropTypes.func.isRequired,\n    ticket: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n    ticket: state.ticket\n});\n\nexport default connect(mapStateToProps, { getTickets })(withRouter(TicketList))"]},"metadata":{},"sourceType":"module"}