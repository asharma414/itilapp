{"ast":null,"code":"import _regeneratorRuntime from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/abhinav/Desktop/itilapp/client/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{connect}from'react-redux';import{newTicket}from'../actions/ticketActions';import{findUser}from'../actions/userActions';import{Form,Button,Row,Col}from'react-bootstrap';import LoadingScreen from'./loadingscreen';var NewTicket=/*#__PURE__*/function(_Component){_inherits(NewTicket,_Component);function NewTicket(){var _getPrototypeOf2;var _this;_classCallCheck(this,NewTicket);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(NewTicket)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={title:'',status:'New',description:'',customerName:'',customerContact:'',assignedTo:'',errors:{}};_this.onChange=function(e){_this.setState(_defineProperty({},e.target.id,e.target.value));};_this.ticketSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var users,userArr,assignedToIndex,user,_newTicket;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.preventDefault();users=_this.props.user.users;//convert user list into array and verify if typed value exists\nuserArr=users.map(function(user){return user.name;});if(!userArr.includes(_this.state.assignedTo)){_context.next=13;break;}//get index of assignedTo in userArr and use to find User ID\nassignedToIndex=userArr.indexOf(_this.state.assignedTo);user=_this.props.auth.user;if(!(_this.state.title.length>0&&_this.state.description.length>0)){_context.next=11;break;}_newTicket={title:_this.state.title,description:_this.state.description,status:_this.state.status,customer:{name:_this.state.customerName,contact:_this.state.customerContact},author:{id:user.id,name:user.name},assignedTo:{id:users[assignedToIndex]._id,name:_this.state.assignedTo}};_context.next=10;return _this.props.newTicket(_newTicket);case 10:_this.props.history.push('/tickets');case 11:_context.next=14;break;case 13:alert('Invalid assigned to user');case 14:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();return _this;}_createClass(NewTicket,[{key:\"componentDidMount\",value:function componentDidMount(){this.props.findUser();}},{key:\"render\",value:function render(){var users=this.props.user.users;var loading=this.props.user.loading;if(loading===true){return React.createElement(\"div\",{className:\"container\"},React.createElement(LoadingScreen,null));}else{return React.createElement(\"div\",null,React.createElement(\"datalist\",{id:\"datalist1\"},users.map(function(user){return React.createElement(\"option\",{key:user._id,value:user.name});})),React.createElement(Form,{className:\"my-4\",onSubmit:this.ticketSubmit},React.createElement(Form.Group,{controlId:\"title\"},React.createElement(Form.Label,null,\"Title\"),React.createElement(Form.Control,{type:\"text\",onChange:this.onChange,value:this.state.title,required:true,placeholder:\"Ticket Title\"})),React.createElement(Form.Group,{controlId:\"assignedTo\"},React.createElement(Form.Label,null,\"Assigned To\"),React.createElement(Form.Control,{list:\"datalist1\",type:\"text\",value:this.state.assignedTo,onChange:this.onChange,required:true,placeholder:\"Assign ticket to user\"})),React.createElement(Row,null,React.createElement(Col,null,React.createElement(Form.Group,{controlId:\"customerName\"},React.createElement(Form.Label,null,\"Customer Name\"),React.createElement(Form.Control,{type:\"text\",onChange:this.onChange,value:this.state.customerName,placeholder:\"Customer's Name\"}))),React.createElement(Col,null,React.createElement(Form.Group,{controlId:\"customerContact\"},React.createElement(Form.Label,null,\"Customer Contact\"),React.createElement(Form.Control,{type:\"text\",onChange:this.onChange,value:this.state.customerContact,placeholder:\"Customer's Contact Info\"})))),React.createElement(Row,null,React.createElement(Col,null,React.createElement(Form.Group,{controlId:\"status\"},React.createElement(Form.Label,null,\"Status\"),React.createElement(Form.Control,{as:\"select\",value:this.state.newStatus,onChange:this.onChange},React.createElement(\"option\",null,\"New\"),React.createElement(\"option\",null,\"Awaiting Customer Feedback\"),React.createElement(\"option\",null,\"In Progress\"),React.createElement(\"option\",null,\"Cancelled\"),React.createElement(\"option\",null,\"Resolved\"))))),React.createElement(Form.Group,{controlId:\"description\"},React.createElement(Form.Label,null,\"Description\"),React.createElement(Form.Control,{as:\"textarea\",value:this.state.description,onChange:this.onChange,required:true,placeholder:\"Ticket description\"})),React.createElement(Button,{variant:\"outline-primary\",type:\"submit\"},\"Submit\")));}}}]);return NewTicket;}(Component);var mapStateToProps=function mapStateToProps(state){return{auth:state.auth,user:state.user};};export default connect(mapStateToProps,{newTicket:newTicket,findUser:findUser})(NewTicket);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/newticket.js"],"names":["React","Component","connect","newTicket","findUser","Form","Button","Row","Col","LoadingScreen","NewTicket","state","title","status","description","customerName","customerContact","assignedTo","errors","onChange","e","setState","target","id","value","ticketSubmit","preventDefault","users","props","user","userArr","map","name","includes","assignedToIndex","indexOf","auth","length","customer","contact","author","_id","history","push","alert","loading","newStatus","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { newTicket } from '../actions/ticketActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport LoadingScreen from './loadingscreen';\n\nclass NewTicket extends Component {\n    state = {\n        title: '',\n        status: 'New',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        assignedTo: '',\n        errors: {}\n    }\n\n    componentDidMount() {\n        this.props.findUser();\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.id] : e.target.value })\n    }\n\n    ticketSubmit = async (e) => {\n        e.preventDefault();\n        const { users } = this.props.user;\n        //convert user list into array and verify if typed value exists\n        let userArr = users.map(user => user.name);\n        if (userArr.includes(this.state.assignedTo)){\n            //get index of assignedTo in userArr and use to find User ID\n            let assignedToIndex = userArr.indexOf(this.state.assignedTo)\n            const { user } = this.props.auth;\n            if (this.state.title.length > 0 && this.state.description.length > 0){\n                const newTicket = {\n                    title: this.state.title,\n                    description: this.state.description,\n                    status: this.state.status,\n                    customer: {\n                        name: this.state.customerName,\n                        contact: this.state.customerContact\n                    },\n                    author: {\n                        id: user.id,\n                        name: user.name\n                    },\n                    assignedTo: {\n                        id: users[assignedToIndex]._id,\n                        name: this.state.assignedTo\n                    }\n                }\n                await this.props.newTicket(newTicket);\n                this.props.history.push('/tickets');\n            }\n        } else {\n            alert('Invalid assigned to user')\n        }\n    }\n\n    render() {\n        const { users } = this.props.user;\n        const { loading } = this.props.user;\n        if (loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <datalist id='datalist1'>\n                    {\n                        users.map(user => (\n                            <option key={user._id} value={user.name}></option>\n                    ))}\n                    </datalist>\n                    <Form className='my-4' onSubmit={this.ticketSubmit}>\n                        <Form.Group controlId=\"title\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type='text' onChange={this.onChange} value={this.state.title} required placeholder=\"Ticket Title\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"assignedTo\">\n                            <Form.Label>Assigned To</Form.Label>\n                            <Form.Control  list='datalist1' type='text' value={this.state.assignedTo} onChange={this.onChange} required placeholder='Assign ticket to user' />\n                        </Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"customerName\">\n                                <Form.Label>Customer Name</Form.Label>\n                                <Form.Control type='text' onChange={this.onChange} value={this.state.customerName} placeholder=\"Customer's Name\" />\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"customerContact\">\n                                <Form.Label>Customer Contact</Form.Label>\n                                <Form.Control type='text' onChange={this.onChange} value={this.state.customerContact} placeholder=\"Customer's Contact Info\" />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId='status'>\n                                <Form.Label>Status</Form.Label>\n                                <Form.Control as='select' value={this.state.newStatus} onChange={this.onChange}>\n                                    <option>New</option>\n                                    <option>Awaiting Customer Feedback</option>\n                                    <option>In Progress</option>\n                                    <option>Cancelled</option>\n                                    <option>Resolved</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Form.Group controlId=\"description\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control as='textarea' value={this.state.description} onChange={this.onChange} required placeholder=\"Ticket description\" />\n                    </Form.Group>\n                    <Button variant=\"outline-primary\" type=\"submit\">Submit</Button>\n                </Form>\n            </div>\n            )\n                }\n    }\n}\n\nNewTicket.propTypes = {\n    auth: PropTypes.object.isRequired,\n    newTicket: PropTypes.func.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    user: state.user\n});\n\nexport default connect(mapStateToProps, { newTicket, findUser })(NewTicket)"]},"metadata":{},"sourceType":"module"}