{"ast":null,"code":"import React from'react';import{BrowserRouter as Router,Route,Switch}from'react-router-dom';import{Provider}from'react-redux';import store from'./store';import TicketList from'./components/ticketlist';import Navigation from'./components/navbar';import Register from'./components/auth/register';import Login from'./components/auth/login';import NewTicket from'./components/newticket';import TicketPage from'./components/ticketpage';import PrivateRoute from'./components/protected-route/privateroute';import jwt_decode from\"jwt-decode\";import setAuthToken from\"./utils/setAuthToken\";import{setCurrentUser,logoutUser}from\"./actions/authActions\";import bootstrap from'bootstrap/dist/css/bootstrap.min.css';import'./App.css';// Check for token to keep user logged in\nif(localStorage.jwtToken){// Set auth token header auth\nvar token=localStorage.jwtToken;setAuthToken(token);// Decode token and get user info and exp\nvar decoded=jwt_decode(token);// Set user and isAuthenticated\nstore.dispatch(setCurrentUser(decoded));// Check for expired token\nvar currentTime=Date.now()/1000;// to get in milliseconds\nif(decoded.exp<currentTime){// Logout user\nstore.dispatch(logoutUser());// Redirect to login\nwindow.location.href=\"./login\";}}function App(){return React.createElement(Provider,{store:store},React.createElement(\"div\",{className:\"container\"},React.createElement(Router,null,React.createElement(Navigation,null),React.createElement(Route,{path:\"/\",exact:true,component:Login}),React.createElement(Route,{path:\"/login\",exact:true,component:Login}),React.createElement(Route,{path:\"/register\",exact:true,component:Register}),React.createElement(Switch,null,React.createElement(PrivateRoute,{exact:true,path:\"/tickets\",component:TicketList}),React.createElement(PrivateRoute,{exact:true,path:\"/tickets/:id\",component:TicketPage}),React.createElement(PrivateRoute,{exact:true,path:\"/mytickets\",component:TicketList}),React.createElement(PrivateRoute,{exact:true,path:\"/new\",component:NewTicket})))));}export default App;","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/App.js"],"names":["React","BrowserRouter","Router","Route","Switch","Provider","store","TicketList","Navigation","Register","Login","NewTicket","TicketPage","PrivateRoute","jwt_decode","setAuthToken","setCurrentUser","logoutUser","bootstrap","localStorage","jwtToken","token","decoded","dispatch","currentTime","Date","now","exp","window","location","href","App"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,aAAa,GAAIC,CAAAA,MAAzB,CAAiCC,KAAjC,CAAwCC,MAAxC,KAAsD,kBAAtD,CACA,OAASC,QAAT,KAAyB,aAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,qBAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,4BAArB,CACA,MAAOC,CAAAA,KAAP,KAAkB,yBAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,CACA,MAAOC,CAAAA,YAAP,KAA0B,2CAA1B,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,sBAAzB,CACA,OAASC,cAAT,CAAyBC,UAAzB,KAA2C,uBAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,sCAAtB,CACA,MAAO,WAAP,CAEA;AACA,GAAIC,YAAY,CAACC,QAAjB,CAA2B,CACzB;AACA,GAAMC,CAAAA,KAAK,CAAGF,YAAY,CAACC,QAA3B,CACAL,YAAY,CAACM,KAAD,CAAZ,CACA;AACA,GAAMC,CAAAA,OAAO,CAAGR,UAAU,CAACO,KAAD,CAA1B,CACA;AACAf,KAAK,CAACiB,QAAN,CAAeP,cAAc,CAACM,OAAD,CAA7B,EACF;AACE,GAAME,CAAAA,WAAW,CAAGC,IAAI,CAACC,GAAL,GAAa,IAAjC,CAAuC;AACvC,GAAIJ,OAAO,CAACK,GAAR,CAAcH,WAAlB,CAA+B,CAC7B;AACAlB,KAAK,CAACiB,QAAN,CAAeN,UAAU,EAAzB,EACA;AACAW,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAuB,SAAvB,CACD,CACF,CAED,QAASC,CAAAA,GAAT,EAAe,CACb,MACE,qBAAC,QAAD,EAAU,KAAK,CAAEzB,KAAjB,EACE,2BAAK,SAAS,CAAC,WAAf,EACE,oBAAC,MAAD,MACE,oBAAC,UAAD,MADF,CAEE,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,KAAK,KAArB,CAAsB,SAAS,CAAEI,KAAjC,EAFF,CAGE,oBAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,KAAK,KAA1B,CAA2B,SAAS,CAAEA,KAAtC,EAHF,CAIE,oBAAC,KAAD,EAAO,IAAI,CAAC,WAAZ,CAAwB,KAAK,KAA7B,CAA8B,SAAS,CAAED,QAAzC,EAJF,CAKE,oBAAC,MAAD,MACI,oBAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,IAAI,CAAC,UAAzB,CAAoC,SAAS,CAAEF,UAA/C,EADJ,CAEI,oBAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,IAAI,CAAC,cAAzB,CAAwC,SAAS,CAAEK,UAAnD,EAFJ,CAGI,oBAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,IAAI,CAAC,YAAzB,CAAsC,SAAS,CAAEL,UAAjD,EAHJ,CAII,oBAAC,YAAD,EAAc,KAAK,KAAnB,CAAoB,IAAI,CAAC,MAAzB,CAAgC,SAAS,CAAEI,SAA3C,EAJJ,CALF,CADF,CADF,CADF,CAkBD,CAED,cAAeoB,CAAAA,GAAf","sourcesContent":["import React from 'react';\nimport {BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport TicketList from './components/ticketlist';\nimport Navigation from './components/navbar';\nimport Register from './components/auth/register'\nimport Login from './components/auth/login';\nimport NewTicket from './components/newticket';\nimport TicketPage from './components/ticketpage';\nimport PrivateRoute  from './components/protected-route/privateroute';\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\nimport bootstrap from 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n// Check for token to keep user logged in\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className='container'>\n        <Router>\n          <Navigation />\n          <Route path='/' exact component={Login} />\n          <Route path='/login' exact component={Login} />\n          <Route path='/register' exact component={Register} />\n          <Switch>\n              <PrivateRoute exact path='/tickets' component={TicketList} />\n              <PrivateRoute exact path='/tickets/:id' component={TicketPage} />\n              <PrivateRoute exact path='/mytickets' component={TicketList} />\n              <PrivateRoute exact path='/new' component={NewTicket} />\n          </Switch>\n        </Router>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}