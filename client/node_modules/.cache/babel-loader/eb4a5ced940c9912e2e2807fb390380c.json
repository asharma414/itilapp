{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/newticket.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { newTicket } from '../actions/ticketActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\n\nclass NewTicket extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: '',\n      status: 'New',\n      description: '',\n      customerName: '',\n      customerContact: '',\n      assignedTo: ''\n    };\n\n    this.onKeyUp = e => {\n      this.props.findUser(this.state.assignedTo);\n      /*the autocomplete function takes two arguments,\n      the text field element and an array of possible autocompleted values:*/\n\n      var currentFocus;\n      /*execute a function when someone writes in the text field:*/\n\n      inp.addEventListener(\"input\", function (e) {\n        var a,\n            b,\n            i,\n            val = this.value;\n        /*close any already open lists of autocompleted values*/\n\n        closeAllLists();\n\n        if (!val) {\n          return false;\n        }\n\n        currentFocus = -1;\n        /*create a DIV element that will contain the items (values):*/\n\n        a = document.createElement(\"DIV\");\n        a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n        a.setAttribute(\"class\", \"autocomplete-items\");\n        /*append the DIV element as a child of the autocomplete container:*/\n\n        this.parentNode.appendChild(a);\n        /*for each item in the array...*/\n\n        for (i = 0; i < arr.length; i++) {\n          /*check if the item starts with the same letters as the text field value:*/\n          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n            /*create a DIV element for each matching element:*/\n            b = document.createElement(\"DIV\");\n            /*make the matching letters bold:*/\n\n            b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n            b.innerHTML += arr[i].substr(val.length);\n            /*insert a input field that will hold the current array item's value:*/\n\n            b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n            /*execute a function when someone clicks on the item value (DIV element):*/\n\n            b.addEventListener(\"click\", function (e) {\n              /*insert the value for the autocomplete text field:*/\n              inp.value = this.getElementsByTagName(\"input\")[0].value;\n              /*close the list of autocompleted values,\n              (or any other open lists of autocompleted values:*/\n\n              closeAllLists();\n            });\n            a.appendChild(b);\n          }\n        }\n      });\n      /*execute a function presses a key on the keyboard:*/\n\n      inp.addEventListener(\"keydown\", function (e) {\n        var x = document.getElementById(this.id + \"autocomplete-list\");\n        if (x) x = x.getElementsByTagName(\"div\");\n\n        if (e.keyCode == 40) {\n          /*If the arrow DOWN key is pressed,\n          increase the currentFocus variable:*/\n          currentFocus++;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 38) {\n          //up\n\n          /*If the arrow UP key is pressed,\n          decrease the currentFocus variable:*/\n          currentFocus--;\n          /*and and make the current item more visible:*/\n\n          addActive(x);\n        } else if (e.keyCode == 13) {\n          /*If the ENTER key is pressed, prevent the form from being submitted,*/\n          e.preventDefault();\n\n          if (currentFocus > -1) {\n            /*and simulate a click on the \"active\" item:*/\n            if (x) x[currentFocus].click();\n          }\n        }\n      });\n\n      function addActive(x) {\n        /*a function to classify an item as \"active\":*/\n        if (!x) return false;\n        /*start by removing the \"active\" class on all items:*/\n\n        removeActive(x);\n        if (currentFocus >= x.length) currentFocus = 0;\n        if (currentFocus < 0) currentFocus = x.length - 1;\n        /*add class \"autocomplete-active\":*/\n\n        x[currentFocus].classList.add(\"autocomplete-active\");\n      }\n\n      function removeActive(x) {\n        /*a function to remove the \"active\" class from all autocomplete items:*/\n        for (var i = 0; i < x.length; i++) {\n          x[i].classList.remove(\"autocomplete-active\");\n        }\n      }\n\n      function closeAllLists(elmnt) {\n        /*close all autocomplete lists in the document,\n        except the one passed as an argument:*/\n        var x = document.getElementsByClassName(\"autocomplete-items\");\n\n        for (var i = 0; i < x.length; i++) {\n          if (elmnt != x[i] && elmnt != inp) {\n            x[i].parentNode.removeChild(x[i]);\n          }\n        }\n      }\n      /*execute a function when someone clicks in the document:*/\n\n\n      document.addEventListener(\"click\", function (e) {\n        closeAllLists(e.target);\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.ticketSubmit = async e => {\n      const user = this.props.auth.user;\n      e.preventDefault();\n\n      if (this.state.title.length > 0 && this.state.description.length > 0) {\n        const newTicket = {\n          title: this.state.title,\n          description: this.state.description,\n          status: this.state.status,\n          customer: {\n            name: this.state.customerName,\n            contact: this.state.customerContact\n          },\n          author: {\n            id: user.id,\n            name: user.name\n          }\n        };\n        await this.props.newTicket(newTicket); //this.props.history.push('/tickets');\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(Form, {\n      className: \"my-4\",\n      onSubmit: this.ticketSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      class: \"autocomplete\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Title\"), React.createElement(Form.Control, {\n      type: \"text\",\n      onChange: this.onChange,\n      value: this.state.title,\n      placeholder: \"Ticket Title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))), React.createElement(Form.Group, {\n      controlId: \"assignedTo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \"Assigned To\"), React.createElement(Form.Control, {\n      type: \"text\",\n      onChange: this.onChange,\n      onKeyUp: this.onKeyUp,\n      value: this.state.assignedTo,\n      placeholder: \"Assign to user\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    })), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"customerName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Customer Name\"), React.createElement(Form.Control, {\n      type: \"text\",\n      onChange: this.onChange,\n      value: this.state.customerName,\n      placeholder: \"Customer's Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }))), React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"customerContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, \"Customer Contact\"), React.createElement(Form.Control, {\n      type: \"text\",\n      onChange: this.onChange,\n      value: this.state.customerContact,\n      placeholder: \"Customer's Contact Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Status\"), React.createElement(Form.Control, {\n      as: \"select\",\n      value: this.state.newStatus,\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"New\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Awaiting Customer Feedback\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, \"In Progress\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Cancelled\"), React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Resolved\"))))), React.createElement(Form.Group, {\n      controlId: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Description\"), React.createElement(Form.Control, {\n      as: \"textarea\",\n      value: this.state.description,\n      onChange: this.onChange,\n      placeholder: \"Ticket description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n}\n\nNewTicket.propTypes = {\n  auth: PropTypes.object.isRequired,\n  newTicket: PropTypes.func.isRequired,\n  findUser: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  user: state.users\n});\n\nexport default connect(mapStateToProps, {\n  newTicket,\n  findUser\n})(NewTicket);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/newticket.js"],"names":["React","Component","connect","newTicket","findUser","PropTypes","Form","Button","Row","Col","NewTicket","state","title","status","description","customerName","customerContact","assignedTo","onKeyUp","e","props","currentFocus","inp","addEventListener","a","b","i","val","value","closeAllLists","document","createElement","setAttribute","id","parentNode","appendChild","arr","length","substr","toUpperCase","innerHTML","getElementsByTagName","x","getElementById","keyCode","addActive","preventDefault","click","removeActive","classList","add","remove","elmnt","getElementsByClassName","removeChild","target","onChange","setState","ticketSubmit","user","auth","customer","name","contact","author","render","newStatus","propTypes","object","isRequired","func","mapStateToProps","users"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { newTicket } from '../actions/ticketActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\n\nclass NewTicket extends Component {\n    state = {\n        title: '',\n        status: 'New',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        assignedTo: ''\n    }\n\n    onKeyUp = (e) => {\n        this.props.findUser(this.state.assignedTo);\n        /*the autocomplete function takes two arguments,\n        the text field element and an array of possible autocompleted values:*/\n        var currentFocus;\n        /*execute a function when someone writes in the text field:*/\n        inp.addEventListener(\"input\", function(e) {\n            var a, b, i, val = this.value;\n            /*close any already open lists of autocompleted values*/\n            closeAllLists();\n            if (!val) { return false;}\n            currentFocus = -1;\n            /*create a DIV element that will contain the items (values):*/\n            a = document.createElement(\"DIV\");\n            a.setAttribute(\"id\", this.id + \"autocomplete-list\");\n            a.setAttribute(\"class\", \"autocomplete-items\");\n            /*append the DIV element as a child of the autocomplete container:*/\n            this.parentNode.appendChild(a);\n            /*for each item in the array...*/\n            for (i = 0; i < arr.length; i++) {\n                /*check if the item starts with the same letters as the text field value:*/\n                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {\n                /*create a DIV element for each matching element:*/\n                b = document.createElement(\"DIV\");\n                /*make the matching letters bold:*/\n                b.innerHTML = \"<strong>\" + arr[i].substr(0, val.length) + \"</strong>\";\n                b.innerHTML += arr[i].substr(val.length);\n                /*insert a input field that will hold the current array item's value:*/\n                b.innerHTML += \"<input type='hidden' value='\" + arr[i] + \"'>\";\n                /*execute a function when someone clicks on the item value (DIV element):*/\n                b.addEventListener(\"click\", function(e) {\n                    /*insert the value for the autocomplete text field:*/\n                    inp.value = this.getElementsByTagName(\"input\")[0].value;\n                    /*close the list of autocompleted values,\n                    (or any other open lists of autocompleted values:*/\n                    closeAllLists();\n                });\n                a.appendChild(b);\n                }\n            }\n        });\n        /*execute a function presses a key on the keyboard:*/\n        inp.addEventListener(\"keydown\", function(e) {\n            var x = document.getElementById(this.id + \"autocomplete-list\");\n            if (x) x = x.getElementsByTagName(\"div\");\n            if (e.keyCode == 40) {\n                /*If the arrow DOWN key is pressed,\n                increase the currentFocus variable:*/\n                currentFocus++;\n                /*and and make the current item more visible:*/\n                addActive(x);\n            } else if (e.keyCode == 38) { //up\n                /*If the arrow UP key is pressed,\n                decrease the currentFocus variable:*/\n                currentFocus--;\n                /*and and make the current item more visible:*/\n                addActive(x);\n            } else if (e.keyCode == 13) {\n                /*If the ENTER key is pressed, prevent the form from being submitted,*/\n                e.preventDefault();\n                if (currentFocus > -1) {\n                /*and simulate a click on the \"active\" item:*/\n                if (x) x[currentFocus].click();\n                }\n            }\n        });\n        function addActive(x) {\n            /*a function to classify an item as \"active\":*/\n            if (!x) return false;\n            /*start by removing the \"active\" class on all items:*/\n            removeActive(x);\n            if (currentFocus >= x.length) currentFocus = 0;\n            if (currentFocus < 0) currentFocus = (x.length - 1);\n            /*add class \"autocomplete-active\":*/\n            x[currentFocus].classList.add(\"autocomplete-active\");\n        }\n        function removeActive(x) {\n            /*a function to remove the \"active\" class from all autocomplete items:*/\n            for (var i = 0; i < x.length; i++) {\n            x[i].classList.remove(\"autocomplete-active\");\n            }\n        }\n        function closeAllLists(elmnt) {\n            /*close all autocomplete lists in the document,\n            except the one passed as an argument:*/\n            var x = document.getElementsByClassName(\"autocomplete-items\");\n            for (var i = 0; i < x.length; i++) {\n            if (elmnt != x[i] && elmnt != inp) {\n                x[i].parentNode.removeChild(x[i]);\n            }\n            }\n        }\n        /*execute a function when someone clicks in the document:*/\n        document.addEventListener(\"click\", function (e) {\n            closeAllLists(e.target);\n        });\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.id] : e.target.value })\n    }\n\n    ticketSubmit = async (e) => {\n        const { user } = this.props.auth;\n        e.preventDefault();\n        if (this.state.title.length > 0 && this.state.description.length > 0){\n            const newTicket = {\n                title: this.state.title,\n                description: this.state.description,\n                status: this.state.status,\n                customer: {\n                    name: this.state.customerName,\n                    contact: this.state.customerContact\n                },\n                author: {\n                    id: user.id,\n                    name: user.name\n                }\n            }\n            await this.props.newTicket(newTicket);\n            //this.props.history.push('/tickets');\n        }\n    }\n\n    render() {\n        return (\n            <Form className='my-4' onSubmit={this.ticketSubmit}>\n                <div class='autocomplete'>\n                    <Form.Group controlId=\"title\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control type='text' onChange={this.onChange} value={this.state.title} placeholder=\"Ticket Title\" />\n                    </Form.Group>\n                </div>\n                <Form.Group controlId=\"assignedTo\">\n                    <Form.Label>Assigned To</Form.Label>\n                    <Form.Control type='text' onChange={this.onChange} onKeyUp={this.onKeyUp} value={this.state.assignedTo} placeholder=\"Assign to user\" />\n                </Form.Group>\n            <Row>\n                <Col>\n                    <Form.Group controlId=\"customerName\">\n                        <Form.Label>Customer Name</Form.Label>\n                        <Form.Control type='text' onChange={this.onChange} value={this.state.customerName} placeholder=\"Customer's Name\" />\n                    </Form.Group>\n                </Col>\n                <Col>\n                    <Form.Group controlId=\"customerContact\">\n                        <Form.Label>Customer Contact</Form.Label>\n                        <Form.Control type='text' onChange={this.onChange} value={this.state.customerContact} placeholder=\"Customer's Contact Info\" />\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Row>\n                <Col>\n                    <Form.Group controlId='status'>\n                        <Form.Label>Status</Form.Label>\n                        <Form.Control as='select' value={this.state.newStatus} onChange={this.onChange}>\n                            <option>New</option>\n                            <option>Awaiting Customer Feedback</option>\n                            <option>In Progress</option>\n                            <option>Cancelled</option>\n                            <option>Resolved</option>\n                        </Form.Control>\n                    </Form.Group>\n                </Col>\n            </Row>\n            <Form.Group controlId=\"description\">\n                <Form.Label>Description</Form.Label>\n                <Form.Control as='textarea' value={this.state.description} onChange={this.onChange} placeholder=\"Ticket description\" />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">Submit</Button>\n        </Form>\n        )\n    }\n}\n\nNewTicket.propTypes = {\n    auth: PropTypes.object.isRequired,\n    newTicket: PropTypes.func.isRequired,\n    findUser: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    user: state.users\n});\n\nexport default connect(mapStateToProps, { newTicket, findUser })(NewTicket)"]},"metadata":{},"sourceType":"module"}