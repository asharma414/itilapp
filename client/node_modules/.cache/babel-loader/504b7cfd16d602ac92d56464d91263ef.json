{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/newticket.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { newTicket } from '../actions/ticketActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport LoadingScreen from './loadingscreen';\n\nclass NewTicket extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      title: '',\n      status: 'New',\n      description: '',\n      customerName: '',\n      customerContact: '',\n      assignedTo: '',\n      errors: {}\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.ticketSubmit = async e => {\n      e.preventDefault();\n      const {\n        users\n      } = this.props.user; //convert user list into array and verify if typed value exists\n\n      let userArr = users.map(user => user.name);\n\n      if (userArr.includes(this.state.assignedTo)) {\n        //get index of assignedTo in userArr and use to find User ID\n        let assignedToIndex = userArr.indexOf(this.state.assignedTo);\n        const {\n          user\n        } = this.props.auth;\n\n        if (this.state.title.length > 0 && this.state.description.length > 0) {\n          const newTicket = {\n            title: this.state.title,\n            description: this.state.description,\n            status: this.state.status,\n            customer: {\n              name: this.state.customerName,\n              contact: this.state.customerContact\n            },\n            author: {\n              id: user.id,\n              name: user.name\n            },\n            assignedTo: {\n              id: users[assignedToIndex]._id,\n              name: this.state.assignedTo\n            }\n          };\n          await this.props.newTicket(newTicket);\n          this.props.history.push('/tickets');\n        }\n      } else {\n        alert('Invalid assigned to user');\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.findUser();\n  }\n\n  render() {\n    const {\n      users\n    } = this.props.user;\n    const {\n      loading\n    } = this.props.user;\n\n    if (loading === true) {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"datalist\", {\n        id: \"datalist1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, users.map(user => React.createElement(\"option\", {\n        key: user._id,\n        value: user.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }))), React.createElement(Form, {\n        className: \"my-4\",\n        onSubmit: this.ticketSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Title\"), React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.title,\n        required: true,\n        placeholder: \"Ticket Title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"assignedTo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Assigned To\"), React.createElement(Form.Control, {\n        list: \"datalist1\",\n        type: \"text\",\n        value: this.state.assignedTo,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Assign ticket to user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"customerName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"Customer Name\"), React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.customerName,\n        placeholder: \"Customer's Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"customerContact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"Customer Contact\"), React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.customerContact,\n        placeholder: \"Customer's Contact Info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"status\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Form.Control, {\n        as: \"select\",\n        value: this.state.newStatus,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"New\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Awaiting Customer Feedback\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"In Progress\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Cancelled\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Resolved\"))))), React.createElement(Form.Group, {\n        controlId: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.description,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Ticket description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"outline-primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Submit\")));\n    }\n  }\n\n}\n\nNewTicket.propTypes = {\n  auth: PropTypes.object.isRequired,\n  newTicket: PropTypes.func.isRequired,\n  findUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  newTicket,\n  findUser\n})(NewTicket);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/newticket.js"],"names":["React","Component","connect","newTicket","findUser","PropTypes","Form","Button","Row","Col","LoadingScreen","NewTicket","state","title","status","description","customerName","customerContact","assignedTo","errors","onChange","e","setState","target","id","value","ticketSubmit","preventDefault","users","props","user","userArr","map","name","includes","assignedToIndex","indexOf","auth","length","customer","contact","author","_id","history","push","alert","componentDidMount","render","loading","newStatus","propTypes","object","isRequired","func","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { newTicket } from '../actions/ticketActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport LoadingScreen from './loadingscreen';\n\nclass NewTicket extends Component {\n    state = {\n        title: '',\n        status: 'New',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        assignedTo: '',\n        errors: {}\n    }\n\n    componentDidMount() {\n        this.props.findUser();\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.id] : e.target.value })\n    }\n\n    ticketSubmit = async (e) => {\n        e.preventDefault();\n        const { users } = this.props.user;\n        //convert user list into array and verify if typed value exists\n        let userArr = users.map(user => user.name);\n        if (userArr.includes(this.state.assignedTo)){\n            //get index of assignedTo in userArr and use to find User ID\n            let assignedToIndex = userArr.indexOf(this.state.assignedTo)\n            const { user } = this.props.auth;\n            if (this.state.title.length > 0 && this.state.description.length > 0){\n                const newTicket = {\n                    title: this.state.title,\n                    description: this.state.description,\n                    status: this.state.status,\n                    customer: {\n                        name: this.state.customerName,\n                        contact: this.state.customerContact\n                    },\n                    author: {\n                        id: user.id,\n                        name: user.name\n                    },\n                    assignedTo: {\n                        id: users[assignedToIndex]._id,\n                        name: this.state.assignedTo\n                    }\n                }\n                await this.props.newTicket(newTicket);\n                this.props.history.push('/tickets');\n            }\n        } else {\n            alert('Invalid assigned to user')\n        }\n    }\n\n    render() {\n        const { users } = this.props.user;\n        const { loading } = this.props.user;\n        if (loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <datalist id='datalist1'>\n                    {\n                        users.map(user => (\n                            <option key={user._id} value={user.name}></option>\n                    ))}\n                    </datalist>\n                    <Form className='my-4' onSubmit={this.ticketSubmit}>\n                        <Form.Group controlId=\"title\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type='text' onChange={this.onChange} value={this.state.title} required placeholder=\"Ticket Title\" />\n                        </Form.Group>\n                        <Form.Group controlId=\"assignedTo\">\n                            <Form.Label>Assigned To</Form.Label>\n                            <Form.Control  list='datalist1' type='text' value={this.state.assignedTo} onChange={this.onChange} required placeholder='Assign ticket to user' />\n                        </Form.Group>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId=\"customerName\">\n                                <Form.Label>Customer Name</Form.Label>\n                                <Form.Control type='text' onChange={this.onChange} value={this.state.customerName} placeholder=\"Customer's Name\" />\n                            </Form.Group>\n                        </Col>\n                        <Col>\n                            <Form.Group controlId=\"customerContact\">\n                                <Form.Label>Customer Contact</Form.Label>\n                                <Form.Control type='text' onChange={this.onChange} value={this.state.customerContact} placeholder=\"Customer's Contact Info\" />\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <Form.Group controlId='status'>\n                                <Form.Label>Status</Form.Label>\n                                <Form.Control as='select' value={this.state.newStatus} onChange={this.onChange}>\n                                    <option>New</option>\n                                    <option>Awaiting Customer Feedback</option>\n                                    <option>In Progress</option>\n                                    <option>Cancelled</option>\n                                    <option>Resolved</option>\n                                </Form.Control>\n                            </Form.Group>\n                        </Col>\n                    </Row>\n                    <Form.Group controlId=\"description\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control as='textarea' value={this.state.description} onChange={this.onChange} required placeholder=\"Ticket description\" />\n                    </Form.Group>\n                    <Button variant=\"outline-primary\" type=\"submit\">Submit</Button>\n                </Form>\n            </div>\n            )\n                }\n    }\n}\n\nNewTicket.propTypes = {\n    auth: PropTypes.object.isRequired,\n    newTicket: PropTypes.func.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    user: state.user\n});\n\nexport default connect(mapStateToProps, { newTicket, findUser })(NewTicket)"]},"metadata":{},"sourceType":"module"}