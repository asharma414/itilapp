{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\"; // Login - get user token\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/users/login', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register user\n\nexport const registerUser = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/users/register', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/users/login', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.resopnse.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //logout\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/actions/authActions.js"],"names":["axios","returnErrors","setAuthToken","jwt_decode","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","registerUser","name","email","password","config","headers","body","JSON","stringify","post","login","resopnse","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\";\n\n\n// Login - get user token\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n\n    axios\n        .get('/users/login', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n    };\n\n//Register user\nexport const registerUser = ({name, email, password}) => dispatch => {\n    const config = {\n        headers:  {\n            'Content-type': 'application/json'\n        }\n    };\n    const body = JSON.stringify({name, email, password});\n\n    axios\n        .post('/users/register', body, config)\n        .then(res => \n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            })\n            )\n        .catch(err => {\n            dispatch(\n                returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\n            );\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n    };\n\n    export const login = ({email, password}) => dispatch => {\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        };\n\n        const body = JSON.stringify({email, password});\n        \n        axios\n            .post('/users/login', body, config)\n            .then(res => \n                dispatch({\n                    type: LOGIN_SUCCESS,\n                    payload: res.data\n                })\n                )\n            .catch(err => {\n                dispatch(\n                    returnErrors(err.resopnse.data, err.response.status, 'LOGIN_FAIL')\n                );\n                dispatch({\n                    type: LOGIN_FAIL\n                });\n            });\n    };\n\n    //logout\n\n    export const logout = () => {\n        return {\n            type: LOGOUT_SUCCESS\n        };\n    };\n\nexport const tokenConfig = getState => {\n    const token = getState().auth.token;\n\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    };\n\n    if(token) {\n        config.headers['x-auth-token'] = token;\n    }\n    return config;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}