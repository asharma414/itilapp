{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Login - get user token\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/users/login', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register user\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/users/register', userData).then(res => history.push('/login')) //redirect to login page after registration\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const login = (userData, history) => dispatch => {\n  axios.post('/users/login', userData).then(res => {\n    const token = res.data.token;\n    localStorage.setItem('jwtToken', token);\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.resopnse.data\n  }));\n}; //logout\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","loadUser","dispatch","getState","type","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","returnErrors","response","status","AUTH_ERROR","registerUser","userData","history","post","push","login","token","localStorage","setItem","decoded","setCurrentUser","resopnse","logout","LOGOUT_SUCCESS","setUserLoading","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n\n// Login - get user token\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n\n    axios\n        .get('/users/login', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n    };\n\n//Register user\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post('/users/register', userData)\n        .then(res => history.push('/login')) //redirect to login page after registration\n        .catch(err => \n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n}\n\nexport const login = (userData, history) => dispatch => {\n    axios\n        .post('/users/login', userData)\n        .then(res => {\n            const { token } = res.data;\n            localStorage.setItem('jwtToken', token);\n            setAuthToken(token);\n            const decoded = jwt_decode(token);\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.resopnse.data\n            })\n        );\n}\n\n    //logout\n\nexport const logout = () => {\n    return {\n        type: LOGOUT_SUCCESS\n    };\n};\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n\nexport const logoutUser = () => dispatch => {\n    localStorage.removeItem('jwtToken');\n    setAuthToken(false);\n    dispatch(setCurrentUser({}))\n};\n"]},"metadata":{},"sourceType":"module"}