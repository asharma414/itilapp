{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\"; // Login - get user token\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  fetch('/users/login', {\n    headers: config.headers\n  }).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register user\n\nexport const registerUser = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  fetch('/users/register', {\n    method: 'POST',\n    headers: config.headers,\n    body: body\n  }).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  fetch('/users/login', {\n    method: 'POST',\n    headers: config.headers,\n    body: body\n  }).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.resopnse.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //logout\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/actions/authActions.js"],"names":["axios","returnErrors","setAuthToken","jwt_decode","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","loadUser","dispatch","getState","type","token","auth","config","headers","fetch","then","res","payload","data","catch","err","response","status","registerUser","name","email","password","body","JSON","stringify","method","login","resopnse","logout","tokenConfig"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\";\n\n\n// Login - get user token\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n    const token = getState().auth.token;\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    }\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n    fetch('/users/login', {headers: config.headers})\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n    };\n\n//Register user\nexport const registerUser = ({name, email, password}) => dispatch => {\n    const config = {\n        headers:  {\n            'Content-type': 'application/json'\n        }\n    };\n    const body = JSON.stringify({name, email, password});\n\n    fetch('/users/register', {\n        method: 'POST',\n        headers:  config.headers,\n        body: body\n    })\n        .then(res => \n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            })\n            )\n        .catch(err => {\n            dispatch(\n                returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL')\n            );\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n    };\n\n    export const login = ({email, password}) => dispatch => {\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        };\n\n        const body = JSON.stringify({email, password});\n\n        fetch('/users/login', {\n            method: 'POST',\n            headers: config.headers,\n            body: body\n        })\n            .then(res => \n                dispatch({\n                    type: LOGIN_SUCCESS,\n                    payload: res.data\n                })\n                )\n            .catch(err => {\n                dispatch(\n                    returnErrors(err.resopnse.data, err.response.status, 'LOGIN_FAIL')\n                );\n                dispatch({\n                    type: LOGIN_FAIL\n                });\n            });\n    };\n\n    //logout\n\n    export const logout = () => {\n        return {\n            type: LOGOUT_SUCCESS\n        };\n    };\n\nexport const tokenConfig = getState => {\n    const token = getState().auth.token;\n\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    };\n\n    if(token) {\n        config.headers['x-auth-token'] = token;\n    }\n    return config;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}