{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/ticketpage.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { returnErrors } from '../actions/errorActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button } from 'react-bootstrap';\n\nclass TicketPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      status: '',\n      created: '',\n      updated: '',\n      title: '',\n      description: '',\n      customerName: '',\n      customerContact: '',\n      author: '',\n      errors: {}\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.onSubmit = async e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    const id = this.props.match.params.id; //this.props.getTicket(id)\n\n    axios.get(\"/tickets/\".concat(id)).then(res => this.setState({\n      title: res.data.title,\n      created: res.data.createdAt,\n      updated: res.data.updatedAt,\n      description: res.data.description,\n      customerName: ((res.data || {}).customer || {}).name,\n      customerContact: ((res.data || {}).customer || {}).contact,\n      author: ((res.data || {}).author || {}).name\n    })).catch(err => dispatch(returnErrors(err.response.data, err.response.status)));\n  }\n\n  render() {\n    return React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      controlId: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Title\"), React.createElement(Form.Control, {\n      type: \"text\",\n      defaultValue: this.state.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Description\"), React.createElement(Form.Control, {\n      as: \"textarea\",\n      value: this.state.description,\n      onChange: this.onChange,\n      placeholder: \"Enter ticket description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"customerName\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Customer Name\"), React.createElement(Form.Control, {\n      type: \"text\",\n      onChange: this.onChange,\n      value: this.state.customerName,\n      placeholder: \"Enter Customer's Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"customerContact\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Customer Contact\"), React.createElement(Form.Control, {\n      type: \"text\",\n      onChange: this.onChange,\n      value: this.state.customerContact,\n      placeholder: \"Enter Customer's Contact Info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    })), React.createElement(Form.Group, {\n      controlId: \"author\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Form.Label, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Author\"), React.createElement(Form.Control, {\n      type: \"text\",\n      defaultValue: this.state.author,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    })), React.createElement(Button, {\n      variant: \"primary\",\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Submit\"));\n  }\n\n} // TicketPage.propTypes = {\n//     getTicket: PropTypes.func.isRequired,\n//     ticket: PropTypes.object.isRequired\n// }\n// const mapStateToProps = (state) => ({\n//     ticket: state.ticket\n// });\n\n\nexport default connect(null, {\n  returnErrors\n})(TicketPage);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/ticketpage.js"],"names":["axios","React","Component","connect","returnErrors","PropTypes","Form","Button","TicketPage","state","status","created","updated","title","description","customerName","customerContact","author","errors","onChange","e","setState","target","id","value","onSubmit","preventDefault","componentDidMount","props","match","params","get","then","res","data","createdAt","updatedAt","customer","name","contact","catch","err","dispatch","response","render"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { returnErrors } from '../actions/errorActions';\nimport PropTypes from 'prop-types';\nimport { Form, Button } from 'react-bootstrap';\n\n\nclass TicketPage extends Component {\n    state = {\n        status: '',\n        created: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        errors: {}\n    }\n\n    componentDidMount() {\n         const { id } = this.props.match.params;\n         //this.props.getTicket(id)\n         axios\n         .get(`/tickets/${id}`)\n         .then(res => \n            this.setState({\n                title: res.data.title,\n                created: res.data.createdAt,\n                updated: res.data.updatedAt,\n                description: res.data.description,\n                customerName: ((res.data || {}).customer || {}).name,\n                customerContact: ((res.data || {}).customer || {}).contact,\n                author: ((res.data || {}).author || {}).name\n            })\n         )\n         .catch(err => \n            dispatch(returnErrors(err.response.data, err.response.status))\n        );\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.id] : e.target.value })\n    }\n\n    onSubmit = async (e) => {\n        e.preventDefault();\n        \n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.onSubmit}>\n            <Form.Group controlId=\"title\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control type=\"text\" defaultValue={this.state.title} />\n            </Form.Group>\n            <Form.Group controlId=\"description\">\n                <Form.Label>Description</Form.Label>\n                <Form.Control as='textarea' value={this.state.description} onChange={this.onChange} placeholder=\"Enter ticket description\" />\n            </Form.Group>\n            <Form.Group controlId=\"customerName\">\n                <Form.Label>Customer Name</Form.Label>\n                <Form.Control type='text' onChange={this.onChange} value={this.state.customerName} placeholder=\"Enter Customer's Name\" />\n            </Form.Group>\n            <Form.Group controlId=\"customerContact\">\n                <Form.Label>Customer Contact</Form.Label>\n                <Form.Control type='text' onChange={this.onChange} value={this.state.customerContact} placeholder=\"Enter Customer's Contact Info\" />\n            </Form.Group>\n            <Form.Group controlId=\"author\">\n                <Form.Label>Author</Form.Label>\n                <Form.Control type=\"text\" defaultValue={this.state.author}  />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">Submit</Button>\n            </Form>\n        )\n    }\n}\n\n// TicketPage.propTypes = {\n//     getTicket: PropTypes.func.isRequired,\n//     ticket: PropTypes.object.isRequired\n// }\n\n// const mapStateToProps = (state) => ({\n//     ticket: state.ticket\n// });\n\nexport default connect(null, { returnErrors })(TicketPage)"]},"metadata":{},"sourceType":"module"}