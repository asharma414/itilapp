{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/Desktop/itilapp/client/src/components/ticketpage.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport dompurify from 'dompurify';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      commentText: '',\n      updates: {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        assignedTo: '',\n        number: ''\n      },\n      original: {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        assignedTo: '',\n        number: ''\n      },\n      comments: [],\n      loading: false,\n      errors: {}\n    };\n\n    this.getTicket = () => {\n      const {\n        id\n      } = this.props.match.params;\n      axios.get(`/api/tickets/${id}`).then(res => this.setState({\n        updates: {\n          title: res.data.title,\n          status: res.data.status,\n          open: res.data.open,\n          created: res.data.createdAt,\n          updated: res.data.updatedAt,\n          description: res.data.description,\n          number: res.data.number,\n          customerName: ((res.data || {}).customer || {}).name,\n          customerContact: ((res.data || {}).customer || {}).contact,\n          author: ((res.data || {}).author || {}).name,\n          assignedTo: ((res.data || {}).assignedTo || {}).name\n        },\n        original: {\n          title: res.data.title,\n          status: res.data.status,\n          open: res.data.open,\n          created: res.data.createdAt,\n          updated: res.data.updatedAt,\n          number: res.data.number,\n          description: res.data.description,\n          customerName: ((res.data || {}).customer || {}).name,\n          customerContact: ((res.data || {}).customer || {}).contact,\n          author: ((res.data || {}).author || {}).name,\n          assignedTo: ((res.data || {}).assignedTo || {}).name\n        },\n        comments: res.data.comments,\n        loading: false\n      })).catch(err => this.props.history.push('/'));\n    };\n\n    this.onChange = e => {\n      const {\n        updates\n      } = { ...this.state\n      };\n      const currentState = updates;\n      const {\n        id,\n        value\n      } = e.target;\n\n      if (id === 'commentText') {\n        this.setState({\n          commentText: value\n        });\n      } else {\n        currentState[id] = value;\n        this.setState({\n          updates: currentState\n        });\n      }\n    };\n\n    this.arrayMatch = (original, updates) => {\n      if (original.length !== updates.length) {\n        return false;\n      }\n\n      for (let i = 0; i < original.length; i++) {\n        if (original[i] !== updates[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.ticketSubmit = async e => {\n      e.preventDefault();\n\n      if (!this.arrayMatch(Object.values(this.state.updates), Object.values(this.state.original))) {\n        const {\n          users\n        } = this.props.user;\n        let userArr = users.map(user => user.name);\n\n        if (userArr.includes(this.state.updates.assignedTo)) {\n          let assignedToIndex = userArr.indexOf(this.state.updates.assignedTo);\n          const {\n            id\n          } = this.props.match.params;\n\n          if (this.state.updates.status !== this.state.original.status) {\n            this.commentPost(`Status is <em>${this.state.updates.status}</em> was <em>${this.state.original.status}</em>`);\n          }\n\n          const updatedTicket = {\n            description: this.state.updates.description,\n            customer: {\n              name: this.state.updates.customerName,\n              contact: this.state.updates.customerContact\n            },\n            status: this.state.updates.status,\n            assignedTo: {\n              id: users[assignedToIndex]._id,\n              name: this.state.updates.assignedTo\n            }\n          };\n          await this.props.updateTicket(id, updatedTicket);\n        } else {\n          alert('Invalid assigned to user');\n        }\n\n        window.location.reload();\n      }\n    };\n\n    this.commentSubmit = async e => {\n      e.preventDefault();\n\n      if (this.state.commentText.length > 0) {\n        const {\n          id\n        } = this.props.match.params;\n        const userId = this.props.auth.user.id;\n        const username = this.props.auth.user.name;\n        const newComment = {\n          text: this.state.commentText,\n          author: {\n            id: userId,\n            name: username\n          }\n        };\n        await this.props.addComment(id, newComment);\n        console.log(this.props); // this.setState({comments: [this.props.comment.comment, ...this.state.comments]})\n      }\n    };\n\n    this.isClosed = () => {\n      return !this.state.original.open ? \"disabled\" : \"\";\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.errors) {\n      this.setState({\n        errors: this.props.errors\n      });\n    }\n\n    this.props.findUser();\n    this.getTicket();\n  }\n\n  render() {\n    const {\n      users\n    } = this.props.user;\n    const {\n      loading\n    } = this.props.user;\n\n    if (this.state.loading === true && loading === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LoadingScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"datalist\", {\n        id: \"datalist1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }\n      }, users.map(user => /*#__PURE__*/React.createElement(\"option\", {\n        key: user._id,\n        value: user.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(Table, {\n        className: \"my-4\",\n        bordered: true,\n        hover: true,\n        responsive: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 33\n        }\n      }, \"Ticket #\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 33\n        }\n      }, \"Title\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 33\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 33\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 33\n        }\n      }, \"Author\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 33\n        }\n      }, \"Created\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 33\n        }\n      }, \"Last Modified\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 33\n        }\n      }, this.state.original.number), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 33\n        }\n      }, this.state.original.title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 33\n        }\n      }, this.state.original.status), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 33\n        }\n      }, this.state.original.open ? 'Open' : 'Closed'), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 33\n        }\n      }, this.state.original.author), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 33\n        }\n      }, moment(this.state.original.created).format('lll')), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 33\n        }\n      }, moment(this.state.original.updated).format('lll'))))), /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.ticketSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"customerName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 37\n        }\n      }, \"Customer Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.updates.customerName,\n        placeholder: \"Customer's Name\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"customerContact\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 37\n        }\n      }, \"Customer Contact\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.updates.customerContact,\n        placeholder: \"Customer's Contact Info\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 37\n        }\n      })))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 37\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"select\",\n        value: this.state.updates.status,\n        onChange: this.onChange,\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 41\n        }\n      }, \"New\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 41\n        }\n      }, \"Awaiting Customer Feedback\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 41\n        }\n      }, \"In Progress\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 41\n        }\n      }, \"Cancelled\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 41\n        }\n      }, \"Resolved\"))))), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"assignedTo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 29\n        }\n      }, \"Assigned To\"), /*#__PURE__*/React.createElement(Form.Control, {\n        list: \"datalist1\",\n        type: \"text\",\n        value: this.state.updates.assignedTo,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Assign ticket to user\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.updates.description,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Ticket description\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-primary\",\n        type: \"submit\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 25\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"my-4 commentForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.commentSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"commentText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 33\n        }\n      }, \"New Comment\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.commentText,\n        onChange: this.onChange,\n        placeholder: \"Enter comments\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-secondary\",\n        type: \"submit\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 29\n        }\n      }, \"Post Comment\"))), this.state.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n        key: comment._id,\n        className: \"mt-3 card-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-9\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 67\n        }\n      }, comment.author.name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-right col-md-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 41\n        }\n      }, moment(comment.createdAt).fromNow())), /*#__PURE__*/React.createElement(\"p\", {\n        dangerouslySetInnerHTML: {\n          __html: sanitizer(comment.text)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 37\n        }\n      }))))));\n    }\n  }\n\n}\n\nTicketPage.propTypes = {\n  updateTicket: PropTypes.func.isRequired,\n  addComment: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  findUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  user: state.user,\n  comment: state.comment\n});\n\nexport default connect(mapStateToProps, {\n  returnErrors,\n  updateTicket,\n  addComment,\n  findUser\n})(TicketPage);","map":{"version":3,"sources":["/Users/abhi/Desktop/itilapp/client/src/components/ticketpage.js"],"names":["axios","React","Component","connect","updateTicket","returnErrors","addComment","findUser","PropTypes","LoadingScreen","Form","Button","Table","Row","Col","moment","dompurify","sanitizer","sanitize","TicketPage","state","commentText","updates","status","created","open","updated","title","description","customerName","customerContact","author","assignedTo","number","original","comments","loading","errors","getTicket","id","props","match","params","get","then","res","setState","data","createdAt","updatedAt","customer","name","contact","catch","err","history","push","onChange","e","currentState","value","target","arrayMatch","length","i","ticketSubmit","preventDefault","Object","values","users","user","userArr","map","includes","assignedToIndex","indexOf","commentPost","updatedTicket","_id","alert","window","location","reload","commentSubmit","userId","auth","username","newComment","text","console","log","isClosed","componentDidMount","render","format","comment","fromNow","__html","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport dompurify from 'dompurify';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n    state = {\n        commentText: '',\n        updates: {\n            status: '',\n            created: '',\n            open: '',\n            updated: '',\n            title: '',\n            description: '',\n            customerName: '',\n            customerContact: '',\n            author: '',\n            assignedTo: '',\n            number: ''\n        },\n        original: {\n            status: '',\n            created: '',\n            open: '',\n            updated: '',\n            title: '',\n            description: '',\n            customerName: '',\n            customerContact: '',\n            author: '',\n            assignedTo: '',\n            number: ''\n        },\n        comments: [],\n        loading: false,\n        errors: {}\n    }\n\n    getTicket = () => {\n        const { id } = this.props.match.params;\n        axios\n            .get(`/api/tickets/${id}`)\n            .then(res =>\n                this.setState({\n                    updates: {\n                        title: res.data.title,\n                        status: res.data.status,\n                        open: res.data.open,\n                        created: res.data.createdAt,\n                        updated: res.data.updatedAt,\n                        description: res.data.description,\n                        number: res.data.number,\n                        customerName: ((res.data || {}).customer || {}).name,\n                        customerContact: ((res.data || {}).customer || {}).contact,\n                        author: ((res.data || {}).author || {}).name,\n                        assignedTo: ((res.data || {}).assignedTo || {}).name\n                    },\n                    original: {\n                        title: res.data.title,\n                        status: res.data.status,\n                        open: res.data.open,\n                        created: res.data.createdAt,\n                        updated: res.data.updatedAt,\n                        number: res.data.number,\n                        description: res.data.description,\n                        customerName: ((res.data || {}).customer || {}).name,\n                        customerContact: ((res.data || {}).customer || {}).contact,\n                        author: ((res.data || {}).author || {}).name,\n                        assignedTo: ((res.data || {}).assignedTo || {}).name,\n                    },\n                    comments: res.data.comments,\n                    loading: false\n                })\n            )\n            .catch(err =>\n                this.props.history.push('/')\n            );\n    }\n\n    componentDidMount() {\n        if (this.props.errors) {\n            this.setState({ errors: this.props.errors })\n        }\n        this.props.findUser();\n        this.getTicket();\n    }\n\n    onChange = (e) => {\n        const { updates } = { ...this.state };\n        const currentState = updates;\n        const { id, value } = e.target;\n        if (id === 'commentText') {\n            this.setState({ commentText: value })\n        } else {\n            currentState[id] = value;\n            this.setState({ updates: currentState })\n        }\n    }\n\n    // commentPost = async (text) => {\n    //     if (text.length > 0) {\n    //         const { id } = this.props.match.params;\n    //         const userId = this.props.auth.user.id;\n    //         const username = this.props.auth.user.name;\n    //         const newComment = {\n    //             text: text,\n    //             author: {\n    //                 id: userId,\n    //                 name: username\n    //             }\n    //         }\n    //         await this.props.addComment(id, newComment);\n    //         window.location.reload();\n    //     }\n    // }\n\n    arrayMatch = (original, updates) => {\n        if (original.length !== updates.length) {\n            return false;\n        }\n        for (let i = 0; i < original.length; i++) {\n            if (original[i] !== updates[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    ticketSubmit = async (e) => {\n        e.preventDefault();\n        if (!this.arrayMatch(Object.values(this.state.updates), Object.values(this.state.original))) {\n            const { users } = this.props.user;\n            let userArr = users.map(user => user.name);\n            if (userArr.includes(this.state.updates.assignedTo)) {\n                let assignedToIndex = userArr.indexOf(this.state.updates.assignedTo)\n                const { id } = this.props.match.params;\n                if (this.state.updates.status !== this.state.original.status) {\n                    this.commentPost(`Status is <em>${this.state.updates.status}</em> was <em>${this.state.original.status}</em>`)\n                }\n                const updatedTicket = {\n                    description: this.state.updates.description,\n                    customer: {\n                        name: this.state.updates.customerName,\n                        contact: this.state.updates.customerContact\n                    },\n                    status: this.state.updates.status,\n                    assignedTo: {\n                        id: users[assignedToIndex]._id,\n                        name: this.state.updates.assignedTo\n                    }\n                }\n                await this.props.updateTicket(id, updatedTicket);\n            } else {\n                alert('Invalid assigned to user')\n            }\n            window.location.reload();\n        }\n    }\n\n    commentSubmit = async (e) => {\n        e.preventDefault();\n        if (this.state.commentText.length > 0) {\n            const { id } = this.props.match.params;\n            const userId = this.props.auth.user.id;\n            const username = this.props.auth.user.name;\n            const newComment = {\n                text: this.state.commentText,\n                author: {\n                    id: userId,\n                    name: username\n                }\n            }\n            await this.props.addComment(id, newComment);\n            console.log(this.props)\n            // this.setState({comments: [this.props.comment.comment, ...this.state.comments]})\n        }\n    }\n\n    isClosed = () => {\n        return !this.state.original.open ? \"disabled\" : \"\";\n    }\n\n    render() {\n        const { users } = this.props.user;\n        const { loading } = this.props.user;\n        if (this.state.loading === true && loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else {\n            return (\n                <div className='container'>\n                    <datalist id='datalist1'>\n                        {\n                            users.map(user => (\n                                <option key={user._id} value={user.name}></option>\n                            ))}\n                    </datalist>\n                    <Table className='my-4' bordered hover responsive='md'>\n                        <thead>\n                            <tr>\n                                <td>Ticket #</td>\n                                <td>Title</td>\n                                <td>Status</td>\n                                <td>State</td>\n                                <td>Author</td>\n                                <td>Created</td>\n                                <td>Last Modified</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{this.state.original.number}</td>\n                                <td>{this.state.original.title}</td>\n                                <td>{this.state.original.status}</td>\n                                <td>{this.state.original.open ? 'Open' : 'Closed'}</td>\n                                <td>{this.state.original.author}</td>\n                                <td>{moment(this.state.original.created).format('lll')}</td>\n                                <td>{moment(this.state.original.updated).format('lll')}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    <Form onSubmit={this.ticketSubmit}>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"customerName\">\n                                    <Form.Label>Customer Name</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.updates.customerName} placeholder=\"Customer's Name\" disabled={this.isClosed()} />\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"customerContact\">\n                                    <Form.Label>Customer Contact</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.updates.customerContact} placeholder=\"Customer's Contact Info\" disabled={this.isClosed()} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId='status'>\n                                    <Form.Label>Status</Form.Label>\n                                    <Form.Control as='select' value={this.state.updates.status} onChange={this.onChange} disabled={this.isClosed()}>\n                                        <option>New</option>\n                                        <option>Awaiting Customer Feedback</option>\n                                        <option>In Progress</option>\n                                        <option>Cancelled</option>\n                                        <option>Resolved</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Form.Group controlId='assignedTo'>\n                            <Form.Label>Assigned To</Form.Label>\n                            <Form.Control list='datalist1' type='text' value={this.state.updates.assignedTo} onChange={this.onChange} required placeholder='Assign ticket to user' disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Form.Group controlId='description'>\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control as='textarea' value={this.state.updates.description} onChange={this.onChange} required placeholder=\"Ticket description\" disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Button variant='outline-primary' type='submit' disabled={this.isClosed()} >Submit</Button>\n                    </Form>\n                    <div className='my-4 commentForm'>\n                        <Form onSubmit={this.commentSubmit}>\n                            <Form.Group controlId='commentText'>\n                                <Form.Label>New Comment</Form.Label>\n                                <Form.Control as='textarea' value={this.state.commentText} onChange={this.onChange} placeholder=\"Enter comments\" disabled={this.isClosed()} />\n                            </Form.Group>\n                            <Button variant='outline-secondary' type='submit' disabled={this.isClosed()}>Post Comment</Button>\n                        </Form>\n                    </div>\n                    {this.state.comments.map(comment =>\n                        <div key={comment._id} className='mt-3 card-footer'>\n                            <div className='row'>\n                                <div className='col-md-12'>\n                                    <div className='row'>\n                                        <div className='col-md-9'><strong>{comment.author.name}</strong></div>\n                                        <div className='text-right col-md-3'>{moment(comment.createdAt).fromNow()}</div>\n                                    </div>\n                                    <p dangerouslySetInnerHTML={{ __html: sanitizer(comment.text) }}></p>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )\n        }\n    }\n}\n\nTicketPage.propTypes = {\n    updateTicket: PropTypes.func.isRequired,\n    addComment: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors,\n    user: state.user,\n    comment: state.comment\n});\n\nexport default connect(mapStateToProps, { returnErrors, updateTicket, addComment, findUser })(TicketPage)"]},"metadata":{},"sourceType":"module"}