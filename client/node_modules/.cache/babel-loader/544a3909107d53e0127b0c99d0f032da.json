{"ast":null,"code":"var _jsxFileName = \"/Users/abhi/Desktop/itilapp/client/src/components/ticketpage.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport dompurify from 'dompurify';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      commentText: '',\n      updates: {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        comments: [],\n        assignedTo: '',\n        number: ''\n      },\n      original: {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        comments: [],\n        assignedTo: '',\n        number: ''\n      },\n      comments: [],\n      loading: false,\n      errors: {}\n    };\n\n    this.onChange = e => {\n      const {\n        updates\n      } = { ...this.state\n      };\n      const currentState = updates;\n      const {\n        id,\n        value\n      } = e.target;\n\n      if (id === 'commentText') {\n        this.setState({\n          commentText: value\n        });\n      } else {\n        currentState[id] = value;\n        this.setState({\n          updates: currentState\n        });\n      }\n    };\n\n    this.commentPost = text => {\n      if (text.length > 0) {\n        const {\n          id\n        } = this.props.match.params;\n        const userId = this.props.auth.user.id;\n        const username = this.props.auth.user.name;\n        const newComment = {\n          text: text,\n          author: {\n            id: userId,\n            name: username\n          }\n        };\n        axios.post(`/api/tickets/${id}/comments`, data).then(res => this.setState({\n          comments: [res.data, ...this.state.comments]\n        })).catch(err => console.log(err));\n      }\n    };\n\n    this.arrayMatch = (original, updates) => {\n      if (Object.keys(original).length !== Object.keys(updates).length) {\n        return false;\n      }\n\n      for (const property in original) {\n        if (original[property] !== updates[property]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    this.ticketSubmit = async e => {\n      e.preventDefault();\n\n      if (!this.arrayMatch(this.state.original, this.state.updates)) {\n        const {\n          users\n        } = this.props.user;\n        let userArr = users.map(user => user.name);\n\n        if (userArr.includes(this.state.updates.assignedTo)) {\n          let assignedToIndex = userArr.indexOf(this.state.updates.assignedTo);\n          const {\n            id\n          } = this.props.match.params;\n\n          if (this.state.updates.status !== this.state.original.status) {\n            this.commentPost(`Status is <em>${this.state.updates.status}</em> was <em>${this.state.original.status}</em>`);\n          }\n\n          const updatedTicket = {\n            description: this.state.updates.description,\n            customer: {\n              name: this.state.updates.customerName,\n              contact: this.state.updates.customerContact\n            },\n            status: this.state.updates.status,\n            assignedTo: {\n              id: users[assignedToIndex]._id,\n              name: this.state.updates.assignedTo\n            }\n          };\n          await this.props.updateTicket(id, updatedTicket);\n        } else {\n          alert('Invalid assigned to user');\n        }\n\n        window.location.reload();\n      }\n    };\n\n    this.commentSubmit = e => {\n      e.preventDefault();\n\n      if (this.state.commentText.length > 0) {\n        this.commentPost(this.state.commentText);\n      }\n    };\n\n    this.isClosed = () => {\n      return !this.state.original.open ? \"disabled\" : \"\";\n    };\n  }\n\n  getTicket() {\n    const {\n      id\n    } = this.props.match.params;\n    axios.get(`/api/tickets/${id}`).then(res => this.setState({\n      updates: {\n        title: res.data.title,\n        status: res.data.status,\n        open: res.data.open,\n        created: res.data.createdAt,\n        updated: res.data.updatedAt,\n        description: res.data.description,\n        number: res.data.number,\n        customerName: ((res.data || {}).customer || {}).name,\n        customerContact: ((res.data || {}).customer || {}).contact,\n        author: ((res.data || {}).author || {}).name,\n        assignedTo: ((res.data || {}).assignedTo || {}).name\n      },\n      original: {\n        title: res.data.title,\n        status: res.data.status,\n        open: res.data.open,\n        created: res.data.createdAt,\n        updated: res.data.updatedAt,\n        number: res.data.number,\n        description: res.data.description,\n        customerName: ((res.data || {}).customer || {}).name,\n        customerContact: ((res.data || {}).customer || {}).contact,\n        author: ((res.data || {}).author || {}).name,\n        assignedTo: ((res.data || {}).assignedTo || {}).name\n      },\n      comments: res.data.comments,\n      loading: false\n    })).catch(err => this.props.history.push('/'));\n  }\n\n  componentDidMount() {\n    if (this.props.errors) {\n      this.setState({\n        errors: this.props.errors\n      });\n    }\n\n    this.props.findUser();\n    this.getTicket();\n    this.setState({\n      loading: true\n    });\n  }\n\n  render() {\n    const {\n      users\n    } = this.props.user;\n    const {\n      loading\n    } = this.props.user;\n\n    if (this.state.loading === true && loading === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LoadingScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"datalist\", {\n        id: \"datalist1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }\n      }, users.map(user => /*#__PURE__*/React.createElement(\"option\", {\n        key: user._id,\n        value: user.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 33\n        }\n      }))), /*#__PURE__*/React.createElement(Table, {\n        className: \"my-4\",\n        bordered: true,\n        hover: true,\n        responsive: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 33\n        }\n      }, \"Ticket #\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 33\n        }\n      }, \"Title\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 33\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 33\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 33\n        }\n      }, \"Author\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 33\n        }\n      }, \"Created\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 33\n        }\n      }, \"Last Modified\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 33\n        }\n      }, this.state.original.number), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 33\n        }\n      }, this.state.original.title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 33\n        }\n      }, this.state.original.status), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 33\n        }\n      }, this.state.original.open ? 'Open' : 'Closed'), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 33\n        }\n      }, this.state.original.author), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 33\n        }\n      }, moment(this.state.original.created).format('lll')), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 33\n        }\n      }, moment(this.state.original.updated).format('lll'))))), /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.ticketSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"customerName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 37\n        }\n      }, \"Customer Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.updates.customerName,\n        placeholder: \"Customer's Name\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"customerContact\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 37\n        }\n      }, \"Customer Contact\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.updates.customerContact,\n        placeholder: \"Customer's Contact Info\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 37\n        }\n      })))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 37\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"select\",\n        value: this.state.updates.status,\n        onChange: this.onChange,\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 41\n        }\n      }, \"New\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 41\n        }\n      }, \"Awaiting Customer Feedback\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 41\n        }\n      }, \"In Progress\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 41\n        }\n      }, \"Cancelled\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 41\n        }\n      }, \"Resolved\"))))), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"assignedTo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 29\n        }\n      }, \"Assigned To\"), /*#__PURE__*/React.createElement(Form.Control, {\n        list: \"datalist1\",\n        type: \"text\",\n        value: this.state.updates.assignedTo,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Assign ticket to user\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.updates.description,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Ticket description\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-primary\",\n        type: \"submit\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 25\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"my-4 commentForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.commentSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"commentText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 33\n        }\n      }, \"New Comment\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.commentText,\n        onChange: this.onChange,\n        placeholder: \"Enter comments\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-secondary\",\n        type: \"submit\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 29\n        }\n      }, \"Post Comment\"))), this.state.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n        key: comment._id,\n        className: \"mt-3 card-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-9\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 67\n        }\n      }, comment.author.name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-right col-md-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 41\n        }\n      }, moment(comment.createdAt).fromNow())), /*#__PURE__*/React.createElement(\"p\", {\n        dangerouslySetInnerHTML: {\n          __html: sanitizer(comment.text)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 37\n        }\n      }))))));\n    }\n  }\n\n}\n\nTicketPage.propTypes = {\n  updateTicket: PropTypes.func.isRequired,\n  addComment: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  findUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  returnErrors,\n  updateTicket,\n  addComment,\n  findUser\n})(TicketPage);","map":{"version":3,"sources":["/Users/abhi/Desktop/itilapp/client/src/components/ticketpage.js"],"names":["axios","React","Component","connect","updateTicket","returnErrors","addComment","findUser","PropTypes","LoadingScreen","Form","Button","Table","Row","Col","moment","dompurify","sanitizer","sanitize","TicketPage","state","commentText","updates","status","created","open","updated","title","description","customerName","customerContact","author","comments","assignedTo","number","original","loading","errors","onChange","e","currentState","id","value","target","setState","commentPost","text","length","props","match","params","userId","auth","user","username","name","newComment","post","data","then","res","catch","err","console","log","arrayMatch","Object","keys","property","ticketSubmit","preventDefault","users","userArr","map","includes","assignedToIndex","indexOf","updatedTicket","customer","contact","_id","alert","window","location","reload","commentSubmit","isClosed","getTicket","get","createdAt","updatedAt","history","push","componentDidMount","render","format","comment","fromNow","__html","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport moment from 'moment';\nimport dompurify from 'dompurify';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n    state = {\n        commentText: '',\n        updates: {\n            status: '',\n            created: '',\n            open: '',\n            updated: '',\n            title: '',\n            description: '',\n            customerName: '',\n            customerContact: '',\n            author: '',\n            comments: [],\n            assignedTo: '',\n            number: ''\n        },\n        original: {\n            status: '',\n            created: '',\n            open: '',\n            updated: '',\n            title: '',\n            description: '',\n            customerName: '',\n            customerContact: '',\n            author: '',\n            comments: [],\n            assignedTo: '',\n            number: ''\n        },\n        comments: [],\n        loading: false,\n        errors: {}\n    }\n\n    getTicket() {\n        const { id } = this.props.match.params;\n        axios\n            .get(`/api/tickets/${id}`)\n            .then(res =>\n                this.setState({\n                    updates: {\n                        title: res.data.title,\n                        status: res.data.status,\n                        open: res.data.open,\n                        created: res.data.createdAt,\n                        updated: res.data.updatedAt,\n                        description: res.data.description,\n                        number: res.data.number,\n                        customerName: ((res.data || {}).customer || {}).name,\n                        customerContact: ((res.data || {}).customer || {}).contact,\n                        author: ((res.data || {}).author || {}).name,\n                        assignedTo: ((res.data || {}).assignedTo || {}).name\n                    },\n                    original: {\n                        title: res.data.title,\n                        status: res.data.status,\n                        open: res.data.open,\n                        created: res.data.createdAt,\n                        updated: res.data.updatedAt,\n                        number: res.data.number,\n                        description: res.data.description,\n                        customerName: ((res.data || {}).customer || {}).name,\n                        customerContact: ((res.data || {}).customer || {}).contact,\n                        author: ((res.data || {}).author || {}).name,\n                        assignedTo: ((res.data || {}).assignedTo || {}).name,\n                    },\n                    comments: res.data.comments,\n                    loading: false\n                })\n            )\n            .catch(err =>\n                this.props.history.push('/')\n            );\n    }\n\n    componentDidMount() {\n        if (this.props.errors) {\n            this.setState({ errors: this.props.errors })\n        }\n        this.props.findUser();\n        this.getTicket();\n        this.setState({ loading: true })\n    }\n\n    onChange = (e) => {\n        const { updates } = { ...this.state };\n        const currentState = updates;\n        const { id, value } = e.target;\n        if (id === 'commentText') {\n            this.setState({ commentText: value })\n        } else {\n            currentState[id] = value;\n            this.setState({ updates: currentState })\n        }\n    }\n\n    commentPost = (text) => {\n        if (text.length > 0) {\n            const { id } = this.props.match.params;\n            const userId = this.props.auth.user.id;\n            const username = this.props.auth.user.name;\n            const newComment = {\n                text: text,\n                author: {\n                    id: userId,\n                    name: username\n                }\n            }\n            axios\n                .post(`/api/tickets/${id}/comments`, data)\n                .then(res => this.setState({comments: [res.data, ...this.state.comments]}))\n                .catch(err =>\n                    console.log(err)\n                );\n        }\n    }\n\n    arrayMatch = (original, updates) => {\n        if (Object.keys(original).length !== Object.keys(updates).length) {\n            return false;\n        }\n        for (const property in original) {\n            if (original[property] !== updates[property]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    ticketSubmit = async (e) => {\n        e.preventDefault();\n        if (!this.arrayMatch(this.state.original, this.state.updates)) {\n            const { users } = this.props.user;\n            let userArr = users.map(user => user.name);\n            if (userArr.includes(this.state.updates.assignedTo)) {\n                let assignedToIndex = userArr.indexOf(this.state.updates.assignedTo)\n                const { id } = this.props.match.params;\n                if (this.state.updates.status !== this.state.original.status) {\n                    this.commentPost(`Status is <em>${this.state.updates.status}</em> was <em>${this.state.original.status}</em>`)\n                }\n                const updatedTicket = {\n                    description: this.state.updates.description,\n                    customer: {\n                        name: this.state.updates.customerName,\n                        contact: this.state.updates.customerContact\n                    },\n                    status: this.state.updates.status,\n                    assignedTo: {\n                        id: users[assignedToIndex]._id,\n                        name: this.state.updates.assignedTo\n                    }\n                }\n                await this.props.updateTicket(id, updatedTicket);\n            } else {\n                alert('Invalid assigned to user')\n            }\n            window.location.reload();\n        }\n    }\n\n    commentSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.commentText.length > 0) {\n        this.commentPost(this.state.commentText)\n        }\n    }\n\n    isClosed = () => {\n        return !this.state.original.open ? \"disabled\" : \"\";\n    }\n\n    render() {\n        const { users } = this.props.user;\n        const { loading } = this.props.user;\n        if (this.state.loading === true && loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else {\n            return (\n                <div className='container'>\n                    <datalist id='datalist1'>\n                        {\n                            users.map(user => (\n                                <option key={user._id} value={user.name}></option>\n                            ))}\n                    </datalist>\n                    <Table className='my-4' bordered hover responsive='md'>\n                        <thead>\n                            <tr>\n                                <td>Ticket #</td>\n                                <td>Title</td>\n                                <td>Status</td>\n                                <td>State</td>\n                                <td>Author</td>\n                                <td>Created</td>\n                                <td>Last Modified</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{this.state.original.number}</td>\n                                <td>{this.state.original.title}</td>\n                                <td>{this.state.original.status}</td>\n                                <td>{this.state.original.open ? 'Open' : 'Closed'}</td>\n                                <td>{this.state.original.author}</td>\n                                <td>{moment(this.state.original.created).format('lll')}</td>\n                                <td>{moment(this.state.original.updated).format('lll')}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    <Form onSubmit={this.ticketSubmit}>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"customerName\">\n                                    <Form.Label>Customer Name</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.updates.customerName} placeholder=\"Customer's Name\" disabled={this.isClosed()} />\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"customerContact\">\n                                    <Form.Label>Customer Contact</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.updates.customerContact} placeholder=\"Customer's Contact Info\" disabled={this.isClosed()} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId='status'>\n                                    <Form.Label>Status</Form.Label>\n                                    <Form.Control as='select' value={this.state.updates.status} onChange={this.onChange} disabled={this.isClosed()}>\n                                        <option>New</option>\n                                        <option>Awaiting Customer Feedback</option>\n                                        <option>In Progress</option>\n                                        <option>Cancelled</option>\n                                        <option>Resolved</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Form.Group controlId='assignedTo'>\n                            <Form.Label>Assigned To</Form.Label>\n                            <Form.Control list='datalist1' type='text' value={this.state.updates.assignedTo} onChange={this.onChange} required placeholder='Assign ticket to user' disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Form.Group controlId='description'>\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control as='textarea' value={this.state.updates.description} onChange={this.onChange} required placeholder=\"Ticket description\" disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Button variant='outline-primary' type='submit' disabled={this.isClosed()} >Submit</Button>\n                    </Form>\n                    <div className='my-4 commentForm'>\n                        <Form onSubmit={this.commentSubmit}>\n                            <Form.Group controlId='commentText'>\n                                <Form.Label>New Comment</Form.Label>\n                                <Form.Control as='textarea' value={this.state.commentText} onChange={this.onChange} placeholder=\"Enter comments\" disabled={this.isClosed()} />\n                            </Form.Group>\n                            <Button variant='outline-secondary' type='submit' disabled={this.isClosed()}>Post Comment</Button>\n                        </Form>\n                    </div>\n                    {this.state.comments.map(comment =>\n                        <div key={comment._id} className='mt-3 card-footer'>\n                            <div className='row'>\n                                <div className='col-md-12'>\n                                    <div className='row'>\n                                        <div className='col-md-9'><strong>{comment.author.name}</strong></div>\n                                        <div className='text-right col-md-3'>{moment(comment.createdAt).fromNow()}</div>\n                                    </div>\n                                    <p dangerouslySetInnerHTML={{ __html: sanitizer(comment.text) }}></p>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                </div>\n            )\n        }\n    }\n}\n\nTicketPage.propTypes = {\n    updateTicket: PropTypes.func.isRequired,\n    addComment: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors,\n    user: state.user\n});\n\nexport default connect(mapStateToProps, { returnErrors, updateTicket, addComment, findUser })(TicketPage)"]},"metadata":{},"sourceType":"module"}