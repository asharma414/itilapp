{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\"; // Login - get user token\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  axios.get('/users/login', config).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(er => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n};","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/actions/authActions.js"],"names":["axios","returnErrors","setAuthToken","jwt_decode","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","er","err","response","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,UAApC,EAAgDC,UAAhD,EAA4DC,aAA5D,EAA2EC,cAA3E,EAA2FC,aAA3F,EAA0GC,gBAA1G,QAAkI,SAAlI,C,CAGA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClDD,EAAAA,QAAQ,CAAC;AAACE,IAAAA,IAAI,EAAEV;AAAP,GAAD,CAAR;AACA,QAAMW,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B;AACA,QAAME,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;;AAKA,MAAGH,KAAH,EAAS;AACLE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AACDhB,EAAAA,KAAK,CAACoB,GAAN,CAAU,cAAV,EAA0BF,MAA1B,EACKG,IADL,CACUC,GAAG,IAAIT,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEX,WADY;AAElBmB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,EAAE,IAAI;AACTb,IAAAA,QAAQ,CAACZ,YAAY,CAAC0B,GAAG,CAACC,QAAJ,CAAaJ,IAAd,EAAoBG,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAhB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH,GAVL;AAWC,CAtBE","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions'\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from \"./types\";\n\n\n// Login - get user token\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n    const token = getState().auth.token;\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    }\n    if(token){\n        config.headers['x-auth-token'] = token;\n    }\n    axios.get('/users/login', config)\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(er => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n    }\n"]},"metadata":{},"sourceType":"module"}