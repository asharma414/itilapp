{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/ticketpage.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport dompurify from 'dompurify';\nimport moment from 'moment';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      status: '',\n      created: '',\n      open: '',\n      updated: '',\n      title: '',\n      description: '',\n      customerName: '',\n      customerContact: '',\n      author: '',\n      newStatus: '',\n      newOpen: '',\n      comments: [],\n      loading: false,\n      commentText: '',\n      assignedTo: '',\n      commentToggle: false,\n      errors: {}\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.id]: e.target.value\n      });\n    };\n\n    this.commentPost = async text => {\n      const {\n        id\n      } = this.props.match.params;\n      const userId = this.props.auth.user.id;\n      const username = this.props.auth.user.name;\n      const newComment = {\n        text: text,\n        author: {\n          id: userId,\n          name: username\n        }\n      };\n      await this.props.addComment(id, newComment);\n      window.location.reload();\n    };\n\n    this.ticketSubmit = async e => {\n      e.preventDefault();\n      const {\n        users\n      } = this.props.user;\n      let userArr = users.map(user => user.name);\n\n      if (userArr.includes(this.state.assignedTo)) {\n        let assignedToIndex = userArr.indexOf(this.state.assignedTo);\n        const {\n          id\n        } = this.props.match.params;\n\n        if (this.state.newStatus !== this.state.status) {\n          this.commentPost(`Status is <em>${this.state.newStatus}</em> was <em>${this.state.status}</em>`);\n        }\n\n        if (this.state.newOpen !== this.state.open) {\n          this.commentPost(`State is <em>${this.state.newOpen}</em> was <em>${this.state.open}</em>`);\n        }\n\n        const updatedTicket = {\n          description: this.state.description,\n          customer: {\n            name: this.state.customerName,\n            contact: this.state.customerContact\n          },\n          status: this.state.newStatus,\n          open: this.state.newOpen === 'Open' ? true : false,\n          assignedTo: {\n            id: users[assignedToIndex]._id,\n            name: this.state.assignedTo\n          }\n        };\n        await this.props.updateTicket(id, updatedTicket);\n      } else {\n        alert('Invalid assigned to user');\n      }\n\n      window.location.reload();\n    };\n\n    this.commentSubmit = e => {\n      e.preventDefault();\n      this.commentPost(this.state.commentText);\n    };\n  }\n\n  getTicket() {\n    const {\n      id\n    } = this.props.match.params;\n    axios.get(`/api/tickets/${id}`).then(res => this.setState({\n      title: res.data.title,\n      status: res.data.status,\n      newStatus: res.data.status,\n      open: res.data.open === true ? 'Open' : 'Closed',\n      newOpen: res.data.open === true ? 'Open' : 'Closed',\n      created: res.data.createdAt,\n      updated: res.data.updatedAt,\n      description: res.data.description,\n      customerName: ((res.data || {}).customer || {}).name,\n      customerContact: ((res.data || {}).customer || {}).contact,\n      comments: res.data.comments,\n      author: ((res.data || {}).author || {}).name,\n      assignedTo: ((res.data || {}).assignedTo || {}).name,\n      loading: false\n    })).catch(err => console.error(err)).then(this.props.history.push('/'));\n  }\n\n  componentDidMount() {\n    if (this.props.errors) {\n      this.setState({\n        errors: this.props.errors\n      });\n    }\n\n    this.props.findUser();\n    this.getTicket();\n    this.setState({\n      loading: true\n    });\n  }\n\n  render() {\n    const {\n      users\n    } = this.props.user;\n    const {\n      loading\n    } = this.props.user;\n\n    if (this.state.loading === true && loading === true) {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"datalist\", {\n        id: \"datalist1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, users.map(user => React.createElement(\"option\", {\n        key: user._id,\n        value: user.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }))), React.createElement(Table, {\n        className: \"my-4\",\n        bordered: true,\n        hover: true,\n        responsive: \"md\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Title\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Status\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Open?\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Author\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Created\"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Last Modified\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, this.state.title), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, this.state.status), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, this.state.open === 'Open' ? 'Open' : 'Closed'), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, this.state.author), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, this.state.created.substring(0, 19)), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, this.state.updated.substring(0, 19))))), React.createElement(Form, {\n        onSubmit: this.ticketSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"customerName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Customer Name\"), React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.customerName,\n        placeholder: \"Customer's Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"customerContact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Customer Contact\"), React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.customerContact,\n        placeholder: \"Customer's Contact Info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })))), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"newStatus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"Status\"), React.createElement(Form.Control, {\n        as: \"select\",\n        value: this.state.newStatus,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"New\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"Awaiting Customer Feedback\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"In Progress\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Cancelled\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Resolved\")))), React.createElement(Col, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"newOpen\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"State\"), React.createElement(Form.Control, {\n        as: \"select\",\n        value: this.state.newOpen,\n        onChange: this.onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"Open\"), React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, \"Closed\"))))), React.createElement(Form.Group, {\n        controlId: \"assignedTo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Assigned To\"), React.createElement(Form.Control, {\n        list: \"datalist1\",\n        type: \"text\",\n        value: this.state.assignedTo,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Assign ticket to user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      })), React.createElement(Form.Group, {\n        controlId: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, \"Description\"), React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.description,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Ticket description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"outline-primary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"Submit\")), React.createElement(\"div\", {\n        className: \"my-4 commentForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(Form, {\n        onSubmit: this.commentSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Form.Group, {\n        controlId: \"commentText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(Form.Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"New Comment\"), React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.newComment,\n        onChange: this.onChange,\n        placeholder: \"Enter ticket description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"outline-secondary\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, \"Post Comment\"))), this.state.comments.map(comment => React.createElement(\"div\", {\n        key: comment._id,\n        className: \"mt-3 card-footer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, comment.author.name)), React.createElement(\"div\", {\n        className: \"text-right col-md-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, moment(comment.createdAt).fromNow())), React.createElement(\"p\", {\n        dangerouslySetInnerHTML: {\n          __html: sanitizer(comment.text)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }))))));\n    }\n  }\n\n}\n\nTicketPage.propTypes = {\n  updateTicket: PropTypes.func.isRequired,\n  addComment: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  findUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  returnErrors,\n  updateTicket,\n  addComment,\n  findUser\n})(TicketPage);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/ticketpage.js"],"names":["axios","React","Component","connect","updateTicket","returnErrors","addComment","findUser","PropTypes","LoadingScreen","Form","Button","Table","Row","Col","dompurify","moment","sanitizer","sanitize","TicketPage","state","status","created","open","updated","title","description","customerName","customerContact","author","newStatus","newOpen","comments","loading","commentText","assignedTo","commentToggle","errors","onChange","e","setState","target","id","value","commentPost","text","props","match","params","userId","auth","user","username","name","newComment","window","location","reload","ticketSubmit","preventDefault","users","userArr","map","includes","assignedToIndex","indexOf","updatedTicket","customer","contact","_id","alert","commentSubmit","getTicket","get","then","res","data","createdAt","updatedAt","catch","err","console","error","history","push","componentDidMount","render","substring","comment","fromNow","__html","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport dompurify from 'dompurify';\nimport moment from 'moment';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n    state = {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        newStatus: '',\n        newOpen: '',\n        comments:  [],\n        loading: false,\n        commentText: '',\n        assignedTo: '',\n        commentToggle: false,\n        errors: {}\n    }\n\n    getTicket() {\n        const { id } = this.props.match.params;\n        axios\n            .get(`/api/tickets/${id}`)\n            .then(res => \n                this.setState({\n                    title: res.data.title,\n                    status: res.data.status,\n                    newStatus: res.data.status,\n                    open: (res.data.open === true) ? 'Open' : 'Closed',\n                    newOpen: (res.data.open === true) ? 'Open' : 'Closed',\n                    created: res.data.createdAt,\n                    updated: res.data.updatedAt,\n                    description: res.data.description,\n                    customerName: ((res.data || {}).customer || {}).name,\n                    customerContact: ((res.data || {}).customer || {}).contact,\n                    comments: res.data.comments,\n                    author: ((res.data || {}).author || {}).name,\n                    assignedTo: ((res.data || {}).assignedTo || {}).name,\n                    loading: false\n                })\n            )\n            .catch(err => \n                console.error(err)\n        )  \n            .then(\n                this.props.history.push('/')\n            )\n    }\n\n    componentDidMount() {\n        if (this.props.errors) {\n            this.setState({ errors: this.props.errors })\n        }\n        this.props.findUser();\n        this.getTicket();\n        this.setState({ loading: true })\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.id] : e.target.value })\n    }\n\n    commentPost = async (text) => {\n        const { id } = this.props.match.params;\n        const userId = this.props.auth.user.id;\n        const username = this.props.auth.user.name;\n        const newComment = {\n            text: text,\n            author: {\n                id: userId,\n                name: username\n            }\n        }\n        await this.props.addComment(id, newComment);\n        window.location.reload();\n    }\n\n    ticketSubmit = async (e) => {\n        e.preventDefault();\n        const { users } = this.props.user;\n        let userArr = users.map(user => user.name);\n        if (userArr.includes(this.state.assignedTo)){\n            let assignedToIndex = userArr.indexOf(this.state.assignedTo)\n            const { id } = this.props.match.params;\n            if (this.state.newStatus !== this.state.status) {\n                this.commentPost(`Status is <em>${this.state.newStatus}</em> was <em>${this.state.status}</em>`)\n            }\n            if (this.state.newOpen !== this.state.open) {\n                this.commentPost(`State is <em>${this.state.newOpen}</em> was <em>${this.state.open}</em>`)\n            }\n            const updatedTicket = {\n                description: this.state.description,\n                customer: {\n                    name: this.state.customerName,\n                    contact: this.state.customerContact\n                },\n                status: this.state.newStatus,\n                open: (this.state.newOpen === 'Open') ? true : false,\n                assignedTo: {\n                    id: users[assignedToIndex]._id,\n                    name: this.state.assignedTo\n                }\n            }\n            await this.props.updateTicket(id, updatedTicket);\n        } else {\n            alert('Invalid assigned to user')\n        }\n        window.location.reload();\n    }\n\n    commentSubmit = (e) => {\n        e.preventDefault();\n        this.commentPost(this.state.commentText)\n    }\n\n    render() {\n        const { users } = this.props.user;\n        const { loading } = this.props.user;\n        if (this.state.loading === true && loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else {\n            return (\n                <div className='container'>\n                <datalist id='datalist1'>\n                {\n                    users.map(user => (\n                        <option key={user._id} value={user.name}></option>\n                ))}\n                </datalist>\n                    <Table className='my-4' bordered hover responsive='md'>\n                        <thead>\n                            <tr>\n                                <td>Title</td>\n                                <td>Status</td>\n                                <td>Open?</td>\n                                <td>Author</td> \n                                <td>Created</td>\n                                <td>Last Modified</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{this.state.title}</td>\n                                <td>{this.state.status}</td>\n                                <td>{(this.state.open === 'Open') ? 'Open' : 'Closed'}</td>\n                                <td>{this.state.author}</td>\n                                <td>{this.state.created.substring(0,19)}</td>\n                                <td>{this.state.updated.substring(0,19)}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    <Form onSubmit={this.ticketSubmit}>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"customerName\">\n                                    <Form.Label>Customer Name</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.customerName} placeholder=\"Customer's Name\" />\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"customerContact\">\n                                    <Form.Label>Customer Contact</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.customerContact} placeholder=\"Customer's Contact Info\" />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId='newStatus'>\n                                    <Form.Label>Status</Form.Label>\n                                    <Form.Control as='select' value={this.state.newStatus} onChange={this.onChange}>\n                                        <option>New</option>\n                                        <option>Awaiting Customer Feedback</option>\n                                        <option>In Progress</option>\n                                        <option>Cancelled</option>\n                                        <option>Resolved</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId='newOpen'>\n                                    <Form.Label>State</Form.Label>\n                                    <Form.Control as='select' value={this.state.newOpen} onChange={this.onChange}>\n                                        <option>Open</option>\n                                        <option>Closed</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Form.Group controlId='assignedTo'>\n                            <Form.Label>Assigned To</Form.Label>\n                            <Form.Control  list='datalist1' type='text' value={this.state.assignedTo} onChange={this.onChange} required placeholder='Assign ticket to user' />\n                        </Form.Group>\n                        <Form.Group controlId='description'>\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control as='textarea' value={this.state.description} onChange={this.onChange} required placeholder=\"Ticket description\" />\n                        </Form.Group>\n                        <Button variant='outline-primary' type='submit'>Submit</Button>\n                    </Form>\n                    <div className='my-4 commentForm'>\n                        <Form onSubmit={this.commentSubmit}>\n                        <Form.Group controlId='commentText'>\n                            <Form.Label>New Comment</Form.Label>\n                            <Form.Control as='textarea' value={this.state.newComment} onChange={this.onChange} placeholder=\"Enter ticket description\" />\n                        </Form.Group>\n                        <Button variant='outline-secondary' type='submit'>Post Comment</Button>\n                        </Form>\n                    </div>\n                        {this.state.comments.map(comment =>\n                            <div key={comment._id} className='mt-3 card-footer'> \n                                <div className='row'>\n                                        <div className='col-md-12'>\n                                            <div className='row'>\n                                                <div className='col-md-9'><strong>{comment.author.name}</strong></div>\n                                                <div className='text-right col-md-3'>{moment(comment.createdAt).fromNow()}</div>\n                                            </div>\n                                            <p dangerouslySetInnerHTML={{__html: sanitizer(comment.text)}}></p>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n            )\n        }\n    }\n}\n\nTicketPage.propTypes = {\n    updateTicket: PropTypes.func.isRequired,\n    addComment: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors,\n    user: state.user\n});\n\nexport default connect(mapStateToProps, { returnErrors, updateTicket, addComment, findUser })(TicketPage)"]},"metadata":{},"sourceType":"module"}