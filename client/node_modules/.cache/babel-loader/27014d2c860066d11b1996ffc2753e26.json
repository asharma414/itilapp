{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/activatedscreen.js\";\nimport React, { Component } from 'react';\nimport LoadingScreen from './loadingscreen';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { activate } from '../actions/authActions';\nimport axios from 'axios';\n\nclass ActivatedScreen extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    await his.props.activate(window.location.pathname.substring(8));\n    this.state.loading = false;\n  }\n\n  render() {\n    const {\n      errors\n    } = this.props;\n\n    if (this.state.loading === true) {\n      return React.createElement(LoadingScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      });\n    }\n\n    if (errors.emailnotfound) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"Account does not exist\");\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"Your account has been activated!\");\n    }\n  }\n\n}\n\nActivatedScreen.propTypes = {\n  errors: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors\n});\n\nexport default connect(mapStateToProps, {\n  activate\n})(ActivatedScreen);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/activatedscreen.js"],"names":["React","Component","LoadingScreen","connect","PropTypes","activate","axios","ActivatedScreen","state","loading","componentDidMount","his","props","window","location","pathname","substring","render","errors","emailnotfound","propTypes","object","isRequired","mapStateToProps","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAN,SAA8BN,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCO,KADoC,GAC5B;AACJC,MAAAA,OAAO,EAAE;AADL,KAD4B;AAAA;;AAOnC,QAAMC,iBAAN,GAA0B;AACvB,UAAMC,GAAG,CAACC,KAAJ,CAAUP,QAAV,CAAmBQ,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,SAAzB,CAAmC,CAAnC,CAAnB,CAAN;AACA,SAAKR,KAAL,CAAWC,OAAX,GAAqB,KAArB;AACH;;AACDQ,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAa,KAAKN,KAAxB;;AACA,QAAI,KAAKJ,KAAL,CAAWC,OAAX,KAAuB,IAA3B,EAAiC;AAC7B,aACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAGH;;AACD,QAAIS,MAAM,CAACC,aAAX,EAA0B;AACtB,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ;AAGH,KAJD,MAKK;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADJ;AAKC;AACJ;;AA9BmC;;AAiCxCZ,eAAe,CAACa,SAAhB,GAA4B;AACxBF,EAAAA,MAAM,EAAEd,SAAS,CAACiB,MAAV,CAAiBC;AADD,CAA5B;;AAIA,MAAMC,eAAe,GAAGf,KAAK,KAAK;AAC9BgB,EAAAA,IAAI,EAAEhB,KAAK,CAACgB,IADkB;AAE9BN,EAAAA,MAAM,EAAEV,KAAK,CAACU;AAFgB,CAAL,CAA7B;;AAKA,eAAef,OAAO,CAACoB,eAAD,EAAkB;AAAElB,EAAAA;AAAF,CAAlB,CAAP,CAAuCE,eAAvC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport LoadingScreen from './loadingscreen';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { activate } from '../actions/authActions';\nimport axios from 'axios';\n\nclass ActivatedScreen extends Component {\n    state = {\n        loading: true\n    }\n\n\n\n     async componentDidMount() {\n        await his.props.activate(window.location.pathname.substring(8));\n        this.state.loading = false;\n    }\n    render() {\n        const { errors } = this.props;\n        if (this.state.loading === true) {\n            return(\n                <LoadingScreen />\n            )\n        }\n        if (errors.emailnotfound) {\n            return(\n                <div>Account does not exist</div>\n            )\n        }\n        else {\n        return (\n            <div>\n                Your account has been activated!\n            </div>\n        )\n        }\n    }\n}\n\nActivatedScreen.propTypes = {\n    errors: PropTypes.object.isRequired\n  };\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n    });\n\nexport default connect(mapStateToProps, { activate })(ActivatedScreen)"]},"metadata":{},"sourceType":"module"}