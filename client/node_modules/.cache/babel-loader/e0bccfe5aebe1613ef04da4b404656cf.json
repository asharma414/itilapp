{"ast":null,"code":"var _jsxFileName = \"/Users/abhinav/Desktop/itilapp/client/src/components/ticketpage.js\";\nimport axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport dompurify from 'dompurify';\nimport moment from 'moment';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      updates: {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        comments: [],\n        assignedTo: ''\n      },\n      commentToggle: false,\n      original: {\n        status: '',\n        created: '',\n        open: '',\n        updated: '',\n        title: '',\n        description: '',\n        customerName: '',\n        customerContact: '',\n        author: '',\n        comments: [],\n        assignedTo: ''\n      },\n      commentText: '',\n      loading: false,\n      errors: {}\n    };\n\n    this.onChange = e => {\n      const {\n        updates\n      } = { ...this.state\n      };\n      console.log(updates);\n      const currentState = updates;\n      const {\n        id,\n        value\n      } = e.target;\n      currentState[id] = value;\n      this.setState({\n        updates: currentState\n      });\n    };\n\n    this.commentPost = async text => {\n      if (text.length > 0) {\n        const {\n          id\n        } = this.props.match.params;\n        const userId = this.props.auth.user.id;\n        const username = this.props.auth.user.name;\n        const newComment = {\n          text: text,\n          author: {\n            id: userId,\n            name: username\n          }\n        };\n        await this.props.addComment(id, newComment);\n        window.location.reload();\n      }\n    };\n\n    this.ticketSubmit = async e => {\n      e.preventDefault();\n\n      if (Object.values(this.state.updates) !== Object.values(this.state.original)) {\n        const {\n          users\n        } = this.props.user;\n        let userArr = users.map(user => user.name);\n\n        if (userArr.includes(this.state.updates.assignedTo)) {\n          let assignedToIndex = userArr.indexOf(this.state.updates.assignedTo);\n          const {\n            id\n          } = this.props.match.params;\n\n          if (this.state.updates.status !== this.state.original.status) {\n            this.commentPost(`Status is <em>${this.state.updates.status}</em> was <em>${this.state.original.status}</em>`);\n          }\n\n          const updatedTicket = {\n            description: this.state.updates.description,\n            customer: {\n              name: this.state.updates.customerName,\n              contact: this.state.updates.customerContact\n            },\n            status: this.state.updates.status,\n            assignedTo: {\n              id: users[assignedToIndex]._id,\n              name: this.state.updates.assignedTo\n            }\n          };\n          await this.props.updateTicket(id, updatedTicket);\n        } else {\n          alert('Invalid assigned to user');\n        }\n\n        window.location.reload();\n      }\n    };\n\n    this.commentSubmit = e => {\n      e.preventDefault();\n      this.commentPost(this.state.commentText);\n    };\n\n    this.isClosed = () => {\n      return this.state.open === 'Closed' ? \"disabled\" : \"\";\n    };\n  }\n\n  getTicket() {\n    const {\n      id\n    } = this.props.match.params;\n    axios.get(`/api/tickets/${id}`).then(res => this.setState({\n      updates: {\n        title: res.data.title,\n        status: res.data.status,\n        open: res.data.open === true ? 'Open' : 'Closed',\n        created: res.data.createdAt,\n        updated: res.data.updatedAt,\n        description: res.data.description,\n        customerName: ((res.data || {}).customer || {}).name,\n        customerContact: ((res.data || {}).customer || {}).contact,\n        comments: res.data.comments,\n        author: ((res.data || {}).author || {}).name,\n        assignedTo: ((res.data || {}).assignedTo || {}).name\n      },\n      original: {\n        title: res.data.title,\n        status: res.data.status,\n        open: res.data.open === true ? 'Open' : 'Closed',\n        created: res.data.createdAt,\n        updated: res.data.updatedAt,\n        description: res.data.description,\n        customerName: ((res.data || {}).customer || {}).name,\n        customerContact: ((res.data || {}).customer || {}).contact,\n        comments: res.data.comments,\n        author: ((res.data || {}).author || {}).name,\n        assignedTo: ((res.data || {}).assignedTo || {}).name\n      },\n      loading: false\n    })).catch(err => this.props.history.push('/'));\n  }\n\n  componentDidMount() {\n    if (this.props.errors) {\n      this.setState({\n        errors: this.props.errors\n      });\n    }\n\n    this.props.findUser();\n    this.getTicket();\n    this.setState({\n      loading: true\n    });\n  }\n\n  render() {\n    const {\n      users\n    } = this.props.user;\n    const {\n      loading\n    } = this.props.user;\n\n    if (this.state.loading === true && loading === true) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LoadingScreen, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 21\n        }\n      }));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"datalist\", {\n        id: \"datalist1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 17\n        }\n      }, users.map(user => /*#__PURE__*/React.createElement(\"option\", {\n        key: user._id,\n        value: user.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 25\n        }\n      }))), /*#__PURE__*/React.createElement(Table, {\n        className: \"my-4\",\n        bordered: true,\n        hover: true,\n        responsive: \"md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"thead\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 33\n        }\n      }, \"Title\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 33\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 33\n        }\n      }, \"State\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 33\n        }\n      }, \"Author\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 33\n        }\n      }, \"Created\"), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 33\n        }\n      }, \"Last Modified\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 33\n        }\n      }, this.state.updates.title), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 33\n        }\n      }, this.state.updates.status), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 33\n        }\n      }, this.state.updates.open === 'Open' ? 'Open' : 'Closed'), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 33\n        }\n      }, this.state.updates.author), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 33\n        }\n      }, this.state.updates.created.substring(0, 19)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 33\n        }\n      }, this.state.updates.updated.substring(0, 19))))), /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.ticketSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"updates.customerName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 37\n        }\n      }, \"Customer Name\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.updates.customerName,\n        placeholder: \"Customer's Name\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 37\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"updates.customerContact\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 37\n        }\n      }, \"Customer Contact\"), /*#__PURE__*/React.createElement(Form.Control, {\n        type: \"text\",\n        onChange: this.onChange,\n        value: this.state.updates.customerContact,\n        placeholder: \"Customer's Contact Info\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 37\n        }\n      })))), /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"updates.status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 37\n        }\n      }, \"Status\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"select\",\n        value: this.state.updates.status,\n        onChange: this.onChange,\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 41\n        }\n      }, \"New\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 41\n        }\n      }, \"Awaiting Customer Feedback\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 41\n        }\n      }, \"In Progress\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 41\n        }\n      }, \"Cancelled\"), /*#__PURE__*/React.createElement(\"option\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 41\n        }\n      }, \"Resolved\"))))), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"updates.assignedTo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }\n      }, \"Assigned To\"), /*#__PURE__*/React.createElement(Form.Control, {\n        list: \"datalist1\",\n        type: \"text\",\n        value: this.state.updates.assignedTo,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Assign ticket to user\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"updates.description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 29\n        }\n      }, \"Description\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.updates.description,\n        onChange: this.onChange,\n        required: true,\n        placeholder: \"Ticket description\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-primary\",\n        type: \"submit\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 25\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"my-4 commentForm\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Form, {\n        onSubmit: this.commentSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Group, {\n        controlId: \"commentText\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Form.Label, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 29\n        }\n      }, \"New Comment\"), /*#__PURE__*/React.createElement(Form.Control, {\n        as: \"textarea\",\n        value: this.state.newComment,\n        onChange: this.onChange,\n        placeholder: \"Enter comments\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        variant: \"outline-secondary\",\n        type: \"submit\",\n        disabled: this.isClosed(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 25\n        }\n      }, \"Post Comment\"))), this.state.updates.comments.map(comment => /*#__PURE__*/React.createElement(\"div\", {\n        key: comment._id,\n        className: \"mt-3 card-footer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"col-md-9\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 75\n        }\n      }, comment.author.name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"text-right col-md-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 49\n        }\n      }, moment(comment.createdAt).fromNow())), /*#__PURE__*/React.createElement(\"p\", {\n        dangerouslySetInnerHTML: {\n          __html: sanitizer(comment.text)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 45\n        }\n      }))))));\n    }\n  }\n\n}\n\nTicketPage.propTypes = {\n  updateTicket: PropTypes.func.isRequired,\n  addComment: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  errors: PropTypes.object.isRequired,\n  findUser: PropTypes.func.isRequired,\n  user: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  errors: state.errors,\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  returnErrors,\n  updateTicket,\n  addComment,\n  findUser\n})(TicketPage);","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/components/ticketpage.js"],"names":["axios","React","Component","connect","updateTicket","returnErrors","addComment","findUser","PropTypes","LoadingScreen","Form","Button","Table","Row","Col","dompurify","moment","sanitizer","sanitize","TicketPage","state","updates","status","created","open","updated","title","description","customerName","customerContact","author","comments","assignedTo","commentToggle","original","commentText","loading","errors","onChange","e","console","log","currentState","id","value","target","setState","commentPost","text","length","props","match","params","userId","auth","user","username","name","newComment","window","location","reload","ticketSubmit","preventDefault","Object","values","users","userArr","map","includes","assignedToIndex","indexOf","updatedTicket","customer","contact","_id","alert","commentSubmit","isClosed","getTicket","get","then","res","data","createdAt","updatedAt","catch","err","history","push","componentDidMount","render","substring","comment","fromNow","__html","propTypes","func","isRequired","object","mapStateToProps"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateTicket } from '../actions/ticketActions';\nimport { returnErrors } from '../actions/errorActions';\nimport { addComment } from '../actions/commentActions';\nimport { findUser } from '../actions/userActions';\nimport PropTypes from 'prop-types';\nimport LoadingScreen from './loadingscreen';\nimport { Form, Button, Table, Row, Col } from 'react-bootstrap';\nimport dompurify from 'dompurify';\nimport moment from 'moment';\nconst sanitizer = dompurify.sanitize;\n\nclass TicketPage extends Component {\n    state = {\n        updates: {\n            status: '',\n            created: '',\n            open: '',\n            updated: '',\n            title: '',\n            description: '',\n            customerName: '',\n            customerContact: '',\n            author: '',\n            comments:  [],\n            assignedTo: ''\n        },\n        commentToggle: false,\n        original: {\n            status: '',\n            created: '',\n            open: '',\n            updated: '',\n            title: '',\n            description: '',\n            customerName: '',\n            customerContact: '',\n            author: '',\n            comments:  [],\n            assignedTo: ''\n        },\n        commentText: '',\n        loading: false,\n        errors: {}\n    }\n\n    getTicket() {\n        const { id } = this.props.match.params;\n        axios\n            .get(`/api/tickets/${id}`)\n            .then(res => \n                this.setState({\n                    updates: {\n                        title: res.data.title,\n                        status: res.data.status,\n                        open: (res.data.open === true) ? 'Open' : 'Closed',\n                        created: res.data.createdAt,\n                        updated: res.data.updatedAt,\n                        description: res.data.description,\n                        customerName: ((res.data || {}).customer || {}).name,\n                        customerContact: ((res.data || {}).customer || {}).contact,\n                        comments: res.data.comments,\n                        author: ((res.data || {}).author || {}).name,\n                        assignedTo: ((res.data || {}).assignedTo || {}).name\n                    },\n                    original: {\n                        title: res.data.title,\n                        status: res.data.status,\n                        open: (res.data.open === true) ? 'Open' : 'Closed',\n                        created: res.data.createdAt,\n                        updated: res.data.updatedAt,\n                        description: res.data.description,\n                        customerName: ((res.data || {}).customer || {}).name,\n                        customerContact: ((res.data || {}).customer || {}).contact,\n                        comments: res.data.comments,\n                        author: ((res.data || {}).author || {}).name,\n                        assignedTo: ((res.data || {}).assignedTo || {}).name,\n                    },\n                    loading: false\n                })\n            )\n            .catch(err => \n                this.props.history.push('/')\n        );\n    }\n\n    componentDidMount() {\n        if (this.props.errors) {\n            this.setState({ errors: this.props.errors })\n        }\n        this.props.findUser();\n        this.getTicket();\n        this.setState({ loading: true })\n    }\n\n    onChange = (e) => {\n        const { updates } = { ...this.state };\n        console.log(updates)\n        const currentState = updates;\n        const { id, value } = e.target;\n        currentState[id] = value;\n        this.setState({ updates: currentState })\n    }\n\n    commentPost = async (text) => {\n        if(text.length > 0){\n        const { id } = this.props.match.params;\n        const userId = this.props.auth.user.id;\n        const username = this.props.auth.user.name;\n        const newComment = {\n            text: text,\n            author: {\n                id: userId,\n                name: username\n            }\n        }\n        await this.props.addComment(id, newComment);\n        window.location.reload();\n    }\n    }\n\n    ticketSubmit = async (e) => {\n        e.preventDefault();\n        if (Object.values(this.state.updates) !== Object.values(this.state.original)) {\n            const { users } = this.props.user;\n            let userArr = users.map(user => user.name);\n            if (userArr.includes(this.state.updates.assignedTo)){\n                let assignedToIndex = userArr.indexOf(this.state.updates.assignedTo)\n                const { id } = this.props.match.params;\n                if (this.state.updates.status !== this.state.original.status) {\n                    this.commentPost(`Status is <em>${this.state.updates.status}</em> was <em>${this.state.original.status}</em>`)\n                }\n                const updatedTicket = {\n                    description: this.state.updates.description,\n                    customer: {\n                        name: this.state.updates.customerName,\n                        contact: this.state.updates.customerContact\n                    },\n                    status: this.state.updates.status,\n                    assignedTo: {\n                        id: users[assignedToIndex]._id,\n                        name: this.state.updates.assignedTo\n                    }\n                }\n                await this.props.updateTicket(id, updatedTicket);\n            } else {\n                alert('Invalid assigned to user')\n            }\n            window.location.reload();\n    }\n    }\n\n    commentSubmit = (e) => {\n        e.preventDefault();\n        this.commentPost(this.state.commentText)\n    }\n\n    isClosed = () => {\n        return this.state.open === 'Closed' ? \"disabled\" : \"\";\n    }\n\n    render() {\n        const { users } = this.props.user;\n        const { loading } = this.props.user;\n        if (this.state.loading === true && loading === true) {\n            return (\n                <div className='container'>\n                    <LoadingScreen />\n                </div>\n            )\n        } else {\n            return (\n                <div className='container'>\n                <datalist id='datalist1'>\n                {\n                    users.map(user => (\n                        <option key={user._id} value={user.name}></option>\n                ))}\n                </datalist>\n                    <Table className='my-4' bordered hover responsive='md'>\n                        <thead>\n                            <tr>\n                                <td>Title</td>\n                                <td>Status</td>\n                                <td>State</td>\n                                <td>Author</td> \n                                <td>Created</td>\n                                <td>Last Modified</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>{this.state.updates.title}</td>\n                                <td>{this.state.updates.status}</td>\n                                <td>{(this.state.updates.open === 'Open') ? 'Open' : 'Closed'}</td>\n                                <td>{this.state.updates.author}</td>\n                                <td>{this.state.updates.created.substring(0,19)}</td>\n                                <td>{this.state.updates.updated.substring(0,19)}</td>\n                            </tr>\n                        </tbody>\n                    </Table>\n                    <Form onSubmit={this.ticketSubmit}>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId=\"updates.customerName\">\n                                    <Form.Label>Customer Name</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.updates.customerName} placeholder=\"Customer's Name\" disabled={this.isClosed()} />\n                                </Form.Group>\n                            </Col>\n                            <Col>\n                                <Form.Group controlId=\"updates.customerContact\">\n                                    <Form.Label>Customer Contact</Form.Label>\n                                    <Form.Control type='text' onChange={this.onChange} value={this.state.updates.customerContact} placeholder=\"Customer's Contact Info\" disabled={this.isClosed()} />\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <Form.Group controlId='updates.status'>\n                                    <Form.Label>Status</Form.Label>\n                                    <Form.Control as='select' value={this.state.updates.status} onChange={this.onChange} disabled={this.isClosed()}>\n                                        <option>New</option>\n                                        <option>Awaiting Customer Feedback</option>\n                                        <option>In Progress</option>\n                                        <option>Cancelled</option>\n                                        <option>Resolved</option>\n                                    </Form.Control>\n                                </Form.Group>\n                            </Col>\n                        </Row>\n                        <Form.Group controlId='updates.assignedTo'>\n                            <Form.Label>Assigned To</Form.Label>\n                            <Form.Control  list='datalist1' type='text' value={this.state.updates.assignedTo} onChange={this.onChange} required placeholder='Assign ticket to user' disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Form.Group controlId='updates.description'>\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control as='textarea' value={this.state.updates.description} onChange={this.onChange} required placeholder=\"Ticket description\" disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Button variant='outline-primary' type='submit' disabled={this.isClosed()} >Submit</Button>\n                    </Form>\n                    <div className='my-4 commentForm'>\n                        <Form onSubmit={this.commentSubmit}>\n                        <Form.Group controlId='commentText'>\n                            <Form.Label>New Comment</Form.Label>\n                            <Form.Control as='textarea' value={this.state.newComment} onChange={this.onChange} placeholder=\"Enter comments\"  disabled={this.isClosed()} />\n                        </Form.Group>\n                        <Button variant='outline-secondary' type='submit' disabled={this.isClosed()}>Post Comment</Button>\n                        </Form>\n                    </div>\n                        {this.state.updates.comments.map(comment =>\n                            <div key={comment._id} className='mt-3 card-footer'> \n                                <div className='row'>\n                                        <div className='col-md-12'>\n                                            <div className='row'>\n                                                <div className='col-md-9'><strong>{comment.author.name}</strong></div>\n                                                <div className='text-right col-md-3'>{moment(comment.createdAt).fromNow()}</div>\n                                            </div>\n                                            <p dangerouslySetInnerHTML={{__html: sanitizer(comment.text)}}></p>\n                                    </div>\n                                </div>\n                            </div>\n                        )}\n                    </div>\n            )\n        }\n    }\n}\n\nTicketPage.propTypes = {\n    updateTicket: PropTypes.func.isRequired,\n    addComment: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired,\n    findUser: PropTypes.func.isRequired,\n    user: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth,\n    errors: state.errors,\n    user: state.user\n});\n\nexport default connect(mapStateToProps, { returnErrors, updateTicket, addComment, findUser })(TicketPage)"]},"metadata":{},"sourceType":"module"}