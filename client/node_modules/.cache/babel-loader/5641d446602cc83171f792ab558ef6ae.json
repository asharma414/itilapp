{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Login - get user token\n\nexport const loadUser = () => (dispatch, getState) => {\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/users/login', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register user\n\nexport const registerUser = (userData, history) => dispatch => {\n  axios.post('/users/register', userData).then(res => history.push('/login')) //redirect to login page after registration\n  .catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n};\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/users/login', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.resopnse.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //logout\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\nexport const tokenConfig = getState => {\n  const token = getState().auth.token;\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/abhinav/Desktop/itilapp/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","loadUser","dispatch","getState","type","get","tokenConfig","then","res","USER_LOADED","payload","data","catch","err","returnErrors","response","status","AUTH_ERROR","registerUser","userData","history","post","push","login","email","password","config","headers","body","JSON","stringify","LOGIN_SUCCESS","resopnse","LOGIN_FAIL","logout","LOGOUT_SUCCESS","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n\n// Login - get user token\nexport const loadUser = () => (dispatch, getState) => {\n    dispatch({type: USER_LOADING});\n\n    axios\n        .get('/users/login', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n        });\n    };\n\n//Register user\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post('/users/register', userData)\n        .then(res => history.push('/login')) //redirect to login page after registration\n        .catch(err => \n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n}\n\n    export const login = ({email, password}) => dispatch => {\n        const config = {\n            headers: {\n                'Content-type': 'application/json'\n            }\n        };\n\n        const body = JSON.stringify({email, password});\n        \n        axios\n            .post('/users/login', body, config)\n            .then(res => \n                dispatch({\n                    type: LOGIN_SUCCESS,\n                    payload: res.data\n                })\n                )\n            .catch(err => {\n                dispatch(\n                    returnErrors(err.resopnse.data, err.response.status, 'LOGIN_FAIL')\n                );\n                dispatch({\n                    type: LOGIN_FAIL\n                });\n            });\n    };\n\n    //logout\n\n    export const logout = () => {\n        return {\n            type: LOGOUT_SUCCESS\n        };\n    };\n\nexport const tokenConfig = getState => {\n    const token = getState().auth.token;\n\n    const config = {\n        headers: {\n            'Content-type': 'application/json'\n        }\n    };\n\n    if(token) {\n        config.headers['x-auth-token'] = token;\n    }\n    return config;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}