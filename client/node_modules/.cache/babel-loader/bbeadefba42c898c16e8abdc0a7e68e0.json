{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.DOMPurify = factory();\n})(this, function () {\n  'use strict';\n\n  function _toConsumableArray$1(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var hasOwnProperty = Object.hasOwnProperty;\n  var setPrototypeOf = Object.setPrototypeOf;\n  var isFrozen = Object.isFrozen;\n  var objectKeys = Object.keys;\n  var freeze = Object.freeze;\n  var seal = Object.seal; // eslint-disable-line import/no-mutable-exports\n\n  var _ref = typeof Reflect !== 'undefined' && Reflect;\n\n  var apply = _ref.apply;\n  var construct = _ref.construct;\n\n  if (!apply) {\n    apply = function apply(fun, thisValue, args) {\n      return fun.apply(thisValue, args);\n    };\n  }\n\n  if (!freeze) {\n    freeze = function freeze(x) {\n      return x;\n    };\n  }\n\n  if (!seal) {\n    seal = function seal(x) {\n      return x;\n    };\n  }\n\n  if (!construct) {\n    construct = function construct(Func, args) {\n      return new (Function.prototype.bind.apply(Func, [null].concat(_toConsumableArray$1(args))))();\n    };\n  }\n\n  var arrayForEach = unapply(Array.prototype.forEach);\n  var arrayIndexOf = unapply(Array.prototype.indexOf);\n  var arrayJoin = unapply(Array.prototype.join);\n  var arrayPop = unapply(Array.prototype.pop);\n  var arrayPush = unapply(Array.prototype.push);\n  var arraySlice = unapply(Array.prototype.slice);\n  var stringToLowerCase = unapply(String.prototype.toLowerCase);\n  var stringMatch = unapply(String.prototype.match);\n  var stringReplace = unapply(String.prototype.replace);\n  var stringIndexOf = unapply(String.prototype.indexOf);\n  var stringTrim = unapply(String.prototype.trim);\n  var regExpTest = unapply(RegExp.prototype.test);\n  var regExpCreate = unconstruct(RegExp);\n  var typeErrorCreate = unconstruct(TypeError);\n\n  function unapply(func) {\n    return function (thisArg) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return apply(func, thisArg, args);\n    };\n  }\n\n  function unconstruct(func) {\n    return function () {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return construct(func, args);\n    };\n  }\n  /* Add properties to a lookup table */\n\n\n  function addToSet(set, array) {\n    if (setPrototypeOf) {\n      // Make 'in' and truthy checks like Boolean(set.constructor)\n      // independent of any properties defined on Object.prototype.\n      // Prevent prototype setters from intercepting set as a this value.\n      setPrototypeOf(set, null);\n    }\n\n    var l = array.length;\n\n    while (l--) {\n      var element = array[l];\n\n      if (typeof element === 'string') {\n        var lcElement = stringToLowerCase(element);\n\n        if (lcElement !== element) {\n          // Config presets (e.g. tags.js, attrs.js) are immutable.\n          if (!isFrozen(array)) {\n            array[l] = lcElement;\n          }\n\n          element = lcElement;\n        }\n      }\n\n      set[element] = true;\n    }\n\n    return set;\n  }\n  /* Shallow clone an object */\n\n\n  function clone(object) {\n    var newObject = {};\n    var property = void 0;\n\n    for (property in object) {\n      if (apply(hasOwnProperty, object, [property])) {\n        newObject[property] = object[property];\n      }\n    }\n\n    return newObject;\n  }\n\n  var html = freeze(['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'bdi', 'bdo', 'big', 'blink', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'content', 'data', 'datalist', 'dd', 'decorator', 'del', 'details', 'dfn', 'dir', 'div', 'dl', 'dt', 'element', 'em', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'img', 'input', 'ins', 'kbd', 'label', 'legend', 'li', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meter', 'nav', 'nobr', 'ol', 'optgroup', 'option', 'output', 'p', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'section', 'select', 'shadow', 'small', 'source', 'spacer', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'tr', 'track', 'tt', 'u', 'ul', 'var', 'video', 'wbr']); // SVG\n\n  var svg = freeze(['svg', 'a', 'altglyph', 'altglyphdef', 'altglyphitem', 'animatecolor', 'animatemotion', 'animatetransform', 'audio', 'canvas', 'circle', 'clippath', 'defs', 'desc', 'ellipse', 'filter', 'font', 'g', 'glyph', 'glyphref', 'hkern', 'image', 'line', 'lineargradient', 'marker', 'mask', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialgradient', 'rect', 'stop', 'style', 'switch', 'symbol', 'text', 'textpath', 'title', 'tref', 'tspan', 'video', 'view', 'vkern']);\n  var svgFilters = freeze(['feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting', 'feDisplacementMap', 'feDistantLight', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feMerge', 'feMergeNode', 'feMorphology', 'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence']);\n  var mathMl = freeze(['math', 'menclose', 'merror', 'mfenced', 'mfrac', 'mglyph', 'mi', 'mlabeledtr', 'mmultiscripts', 'mn', 'mo', 'mover', 'mpadded', 'mphantom', 'mroot', 'mrow', 'ms', 'mspace', 'msqrt', 'mstyle', 'msub', 'msup', 'msubsup', 'mtable', 'mtd', 'mtext', 'mtr', 'munder', 'munderover']);\n  var text = freeze(['#text']);\n  var html$1 = freeze(['accept', 'action', 'align', 'alt', 'autocomplete', 'background', 'bgcolor', 'border', 'cellpadding', 'cellspacing', 'checked', 'cite', 'class', 'clear', 'color', 'cols', 'colspan', 'controls', 'coords', 'crossorigin', 'datetime', 'default', 'dir', 'disabled', 'download', 'enctype', 'face', 'for', 'headers', 'height', 'hidden', 'high', 'href', 'hreflang', 'id', 'integrity', 'ismap', 'label', 'lang', 'list', 'loop', 'low', 'max', 'maxlength', 'media', 'method', 'min', 'minlength', 'multiple', 'name', 'noshade', 'novalidate', 'nowrap', 'open', 'optimum', 'pattern', 'placeholder', 'poster', 'preload', 'pubdate', 'radiogroup', 'readonly', 'rel', 'required', 'rev', 'reversed', 'role', 'rows', 'rowspan', 'spellcheck', 'scope', 'selected', 'shape', 'size', 'sizes', 'span', 'srclang', 'start', 'src', 'srcset', 'step', 'style', 'summary', 'tabindex', 'title', 'type', 'usemap', 'valign', 'value', 'width', 'xmlns']);\n  var svg$1 = freeze(['accent-height', 'accumulate', 'additive', 'alignment-baseline', 'ascent', 'attributename', 'attributetype', 'azimuth', 'basefrequency', 'baseline-shift', 'begin', 'bias', 'by', 'class', 'clip', 'clip-path', 'clip-rule', 'color', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'cx', 'cy', 'd', 'dx', 'dy', 'diffuseconstant', 'direction', 'display', 'divisor', 'dur', 'edgemode', 'elevation', 'end', 'fill', 'fill-opacity', 'fill-rule', 'filter', 'filterunits', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'fx', 'fy', 'g1', 'g2', 'glyph-name', 'glyphref', 'gradientunits', 'gradienttransform', 'height', 'href', 'id', 'image-rendering', 'in', 'in2', 'k', 'k1', 'k2', 'k3', 'k4', 'kerning', 'keypoints', 'keysplines', 'keytimes', 'lang', 'lengthadjust', 'letter-spacing', 'kernelmatrix', 'kernelunitlength', 'lighting-color', 'local', 'marker-end', 'marker-mid', 'marker-start', 'markerheight', 'markerunits', 'markerwidth', 'maskcontentunits', 'maskunits', 'max', 'mask', 'media', 'method', 'mode', 'min', 'name', 'numoctaves', 'offset', 'operator', 'opacity', 'order', 'orient', 'orientation', 'origin', 'overflow', 'paint-order', 'path', 'pathlength', 'patterncontentunits', 'patterntransform', 'patternunits', 'points', 'preservealpha', 'preserveaspectratio', 'primitiveunits', 'r', 'rx', 'ry', 'radius', 'refx', 'refy', 'repeatcount', 'repeatdur', 'restart', 'result', 'rotate', 'scale', 'seed', 'shape-rendering', 'specularconstant', 'specularexponent', 'spreadmethod', 'stddeviation', 'stitchtiles', 'stop-color', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke', 'stroke-width', 'style', 'surfacescale', 'tabindex', 'targetx', 'targety', 'transform', 'text-anchor', 'text-decoration', 'text-rendering', 'textlength', 'type', 'u1', 'u2', 'unicode', 'values', 'viewbox', 'visibility', 'version', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'width', 'word-spacing', 'wrap', 'writing-mode', 'xchannelselector', 'ychannelselector', 'x', 'x1', 'x2', 'xmlns', 'y', 'y1', 'y2', 'z', 'zoomandpan']);\n  var mathMl$1 = freeze(['accent', 'accentunder', 'align', 'bevelled', 'close', 'columnsalign', 'columnlines', 'columnspan', 'denomalign', 'depth', 'dir', 'display', 'displaystyle', 'encoding', 'fence', 'frame', 'height', 'href', 'id', 'largeop', 'length', 'linethickness', 'lspace', 'lquote', 'mathbackground', 'mathcolor', 'mathsize', 'mathvariant', 'maxsize', 'minsize', 'movablelimits', 'notation', 'numalign', 'open', 'rowalign', 'rowlines', 'rowspacing', 'rowspan', 'rspace', 'rquote', 'scriptlevel', 'scriptminsize', 'scriptsizemultiplier', 'selection', 'separator', 'separators', 'stretchy', 'subscriptshift', 'supscriptshift', 'symmetric', 'voffset', 'width', 'xmlns']);\n  var xml = freeze(['xlink:href', 'xml:id', 'xlink:title', 'xml:space', 'xmlns:xlink']);\n  var MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\n\n  var ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\n  var DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\n\n  var ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\n\n  var IS_ALLOWED_URI = seal(/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n  );\n  var IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\n  var ATTR_WHITESPACE = seal(/[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g // eslint-disable-line no-control-regex\n  );\n\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n\n  function _toConsumableArray(arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n        arr2[i] = arr[i];\n      }\n\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  }\n\n  var getGlobal = function getGlobal() {\n    return typeof window === 'undefined' ? null : window;\n  };\n  /**\n   * Creates a no-op policy for internal use only.\n   * Don't export this function outside this module!\n   * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n   * @param {Document} document The document object (to determine policy name suffix)\n   * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n   * are not supported).\n   */\n\n\n  var _createTrustedTypesPolicy = function _createTrustedTypesPolicy(trustedTypes, document) {\n    if ((typeof trustedTypes === 'undefined' ? 'undefined' : _typeof(trustedTypes)) !== 'object' || typeof trustedTypes.createPolicy !== 'function') {\n      return null;\n    } // Allow the callers to control the unique policy name\n    // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n    // Policy creation with duplicate names throws in Trusted Types.\n\n\n    var suffix = null;\n    var ATTR_NAME = 'data-tt-policy-suffix';\n\n    if (document.currentScript && document.currentScript.hasAttribute(ATTR_NAME)) {\n      suffix = document.currentScript.getAttribute(ATTR_NAME);\n    }\n\n    var policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n    try {\n      return trustedTypes.createPolicy(policyName, {\n        createHTML: function createHTML(html$$1) {\n          return html$$1;\n        }\n      });\n    } catch (error) {\n      // Policy creation failed (most likely another DOMPurify script has\n      // already run). Skip creating the policy, as this will only cause errors\n      // if TT are enforced.\n      console.warn('TrustedTypes policy ' + policyName + ' could not be created.');\n      return null;\n    }\n  };\n\n  function createDOMPurify() {\n    var window = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getGlobal();\n\n    var DOMPurify = function DOMPurify(root) {\n      return createDOMPurify(root);\n    };\n    /**\n     * Version label, exposed for easier checks\n     * if DOMPurify is up to date or not\n     */\n\n\n    DOMPurify.version = '2.0.8';\n    /**\n     * Array of elements that DOMPurify removed during sanitation.\n     * Empty if nothing was removed.\n     */\n\n    DOMPurify.removed = [];\n\n    if (!window || !window.document || window.document.nodeType !== 9) {\n      // Not running in a browser, provide a factory function\n      // so that you can pass your own Window\n      DOMPurify.isSupported = false;\n      return DOMPurify;\n    }\n\n    var originalDocument = window.document;\n    var useDOMParser = false;\n    var removeTitle = false;\n    var document = window.document;\n    var DocumentFragment = window.DocumentFragment,\n        HTMLTemplateElement = window.HTMLTemplateElement,\n        Node = window.Node,\n        NodeFilter = window.NodeFilter,\n        _window$NamedNodeMap = window.NamedNodeMap,\n        NamedNodeMap = _window$NamedNodeMap === undefined ? window.NamedNodeMap || window.MozNamedAttrMap : _window$NamedNodeMap,\n        Text = window.Text,\n        Comment = window.Comment,\n        DOMParser = window.DOMParser,\n        trustedTypes = window.trustedTypes; // As per issue #47, the web-components registry is inherited by a\n    // new document created via createHTMLDocument. As per the spec\n    // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n    // a new empty registry is used when creating a template contents owner\n    // document, so we use that as our parent document to ensure nothing\n    // is inherited.\n\n    if (typeof HTMLTemplateElement === 'function') {\n      var template = document.createElement('template');\n\n      if (template.content && template.content.ownerDocument) {\n        document = template.content.ownerDocument;\n      }\n    }\n\n    var trustedTypesPolicy = _createTrustedTypesPolicy(trustedTypes, originalDocument);\n\n    var emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';\n    var _document = document,\n        implementation = _document.implementation,\n        createNodeIterator = _document.createNodeIterator,\n        getElementsByTagName = _document.getElementsByTagName,\n        createDocumentFragment = _document.createDocumentFragment;\n    var importNode = originalDocument.importNode;\n    var hooks = {};\n    /**\n     * Expose whether this browser supports running the full DOMPurify.\n     */\n\n    DOMPurify.isSupported = implementation && typeof implementation.createHTMLDocument !== 'undefined' && document.documentMode !== 9;\n    var MUSTACHE_EXPR$$1 = MUSTACHE_EXPR,\n        ERB_EXPR$$1 = ERB_EXPR,\n        DATA_ATTR$$1 = DATA_ATTR,\n        ARIA_ATTR$$1 = ARIA_ATTR,\n        IS_SCRIPT_OR_DATA$$1 = IS_SCRIPT_OR_DATA,\n        ATTR_WHITESPACE$$1 = ATTR_WHITESPACE;\n    var IS_ALLOWED_URI$$1 = IS_ALLOWED_URI;\n    /**\n     * We consider the elements and attributes below to be safe. Ideally\n     * don't add any new ones but feel free to remove unwanted ones.\n     */\n\n    /* allowed element names */\n\n    var ALLOWED_TAGS = null;\n    var DEFAULT_ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(html), _toConsumableArray(svg), _toConsumableArray(svgFilters), _toConsumableArray(mathMl), _toConsumableArray(text)));\n    /* Allowed attribute names */\n\n    var ALLOWED_ATTR = null;\n    var DEFAULT_ALLOWED_ATTR = addToSet({}, [].concat(_toConsumableArray(html$1), _toConsumableArray(svg$1), _toConsumableArray(mathMl$1), _toConsumableArray(xml)));\n    /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n\n    var FORBID_TAGS = null;\n    /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n\n    var FORBID_ATTR = null;\n    /* Decide if ARIA attributes are okay */\n\n    var ALLOW_ARIA_ATTR = true;\n    /* Decide if custom data attributes are okay */\n\n    var ALLOW_DATA_ATTR = true;\n    /* Decide if unknown protocols are okay */\n\n    var ALLOW_UNKNOWN_PROTOCOLS = false;\n    /* Output should be safe for jQuery's $() factory? */\n\n    var SAFE_FOR_JQUERY = false;\n    /* Output should be safe for common template engines.\n     * This means, DOMPurify removes data attributes, mustaches and ERB\n     */\n\n    var SAFE_FOR_TEMPLATES = false;\n    /* Decide if document with <html>... should be returned */\n\n    var WHOLE_DOCUMENT = false;\n    /* Track whether config is already set on this instance of DOMPurify. */\n\n    var SET_CONFIG = false;\n    /* Decide if all elements (e.g. style, script) must be children of\n     * document.body. By default, browsers might move them to document.head */\n\n    var FORCE_BODY = false;\n    /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n     * string (or a TrustedHTML object if Trusted Types are supported).\n     * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n     */\n\n    var RETURN_DOM = false;\n    /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n     * string  (or a TrustedHTML object if Trusted Types are supported) */\n\n    var RETURN_DOM_FRAGMENT = false;\n    /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n     * `Node` is imported into the current `Document`. If this flag is not enabled the\n     * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n     * DOMPurify. */\n\n    var RETURN_DOM_IMPORT = false;\n    /* Try to return a Trusted Type object instead of a string, retrun a string in\n     * case Trusted Types are not supported  */\n\n    var RETURN_TRUSTED_TYPE = false;\n    /* Output should be free from DOM clobbering attacks? */\n\n    var SANITIZE_DOM = true;\n    /* Keep element content when removing element? */\n\n    var KEEP_CONTENT = true;\n    /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n     * of importing it into a new Document and returning a sanitized copy */\n\n    var IN_PLACE = false;\n    /* Allow usage of profiles like html, svg and mathMl */\n\n    var USE_PROFILES = {};\n    /* Tags to ignore content of when KEEP_CONTENT is true */\n\n    var FORBID_CONTENTS = addToSet({}, ['annotation-xml', 'audio', 'colgroup', 'desc', 'foreignobject', 'head', 'iframe', 'math', 'mi', 'mn', 'mo', 'ms', 'mtext', 'noembed', 'noframes', 'plaintext', 'script', 'style', 'svg', 'template', 'thead', 'title', 'video', 'xmp']);\n    /* Tags that are safe for data: URIs */\n\n    var DATA_URI_TAGS = addToSet({}, ['audio', 'video', 'img', 'source', 'image']);\n    /* Attributes safe for values like \"javascript:\" */\n\n    var URI_SAFE_ATTRIBUTES = null;\n    var DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, ['alt', 'class', 'for', 'id', 'label', 'name', 'pattern', 'placeholder', 'summary', 'title', 'value', 'style', 'xmlns']);\n    /* Keep a reference to config to pass to hooks */\n\n    var CONFIG = null;\n    /* Ideally, do not touch anything below this line */\n\n    /* ______________________________________________ */\n\n    var formElement = document.createElement('form');\n    /**\n     * _parseConfig\n     *\n     * @param  {Object} cfg optional config literal\n     */\n    // eslint-disable-next-line complexity\n\n    var _parseConfig = function _parseConfig(cfg) {\n      if (CONFIG && CONFIG === cfg) {\n        return;\n      }\n      /* Shield configuration object from tampering */\n\n\n      if (!cfg || (typeof cfg === 'undefined' ? 'undefined' : _typeof(cfg)) !== 'object') {\n        cfg = {};\n      }\n      /* Set configuration parameters */\n\n\n      ALLOWED_TAGS = 'ALLOWED_TAGS' in cfg ? addToSet({}, cfg.ALLOWED_TAGS) : DEFAULT_ALLOWED_TAGS;\n      ALLOWED_ATTR = 'ALLOWED_ATTR' in cfg ? addToSet({}, cfg.ALLOWED_ATTR) : DEFAULT_ALLOWED_ATTR;\n      URI_SAFE_ATTRIBUTES = 'ADD_URI_SAFE_ATTR' in cfg ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR) : DEFAULT_URI_SAFE_ATTRIBUTES;\n      FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n      FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n      USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n      ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n\n      ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n\n      ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n\n      SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n\n      SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n\n      WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n\n      RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n\n      RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n\n      RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n\n      RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n\n      FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n\n      SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n\n      KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n\n      IN_PLACE = cfg.IN_PLACE || false; // Default false\n\n      IS_ALLOWED_URI$$1 = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI$$1;\n\n      if (SAFE_FOR_TEMPLATES) {\n        ALLOW_DATA_ATTR = false;\n      }\n\n      if (RETURN_DOM_FRAGMENT) {\n        RETURN_DOM = true;\n      }\n      /* Parse profile info */\n\n\n      if (USE_PROFILES) {\n        ALLOWED_TAGS = addToSet({}, [].concat(_toConsumableArray(text)));\n        ALLOWED_ATTR = [];\n\n        if (USE_PROFILES.html === true) {\n          addToSet(ALLOWED_TAGS, html);\n          addToSet(ALLOWED_ATTR, html$1);\n        }\n\n        if (USE_PROFILES.svg === true) {\n          addToSet(ALLOWED_TAGS, svg);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.svgFilters === true) {\n          addToSet(ALLOWED_TAGS, svgFilters);\n          addToSet(ALLOWED_ATTR, svg$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n\n        if (USE_PROFILES.mathMl === true) {\n          addToSet(ALLOWED_TAGS, mathMl);\n          addToSet(ALLOWED_ATTR, mathMl$1);\n          addToSet(ALLOWED_ATTR, xml);\n        }\n      }\n      /* Merge configuration parameters */\n\n\n      if (cfg.ADD_TAGS) {\n        if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n          ALLOWED_TAGS = clone(ALLOWED_TAGS);\n        }\n\n        addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n      }\n\n      if (cfg.ADD_ATTR) {\n        if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n          ALLOWED_ATTR = clone(ALLOWED_ATTR);\n        }\n\n        addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n      }\n\n      if (cfg.ADD_URI_SAFE_ATTR) {\n        addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n      }\n      /* Add #text in case KEEP_CONTENT is set to true */\n\n\n      if (KEEP_CONTENT) {\n        ALLOWED_TAGS['#text'] = true;\n      }\n      /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n\n\n      if (WHOLE_DOCUMENT) {\n        addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n      }\n      /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n\n\n      if (ALLOWED_TAGS.table) {\n        addToSet(ALLOWED_TAGS, ['tbody']);\n        delete FORBID_TAGS.tbody;\n      } // Prevent further manipulation of configuration.\n      // Not available in IE8, Safari 5, etc.\n\n\n      if (freeze) {\n        freeze(cfg);\n      }\n\n      CONFIG = cfg;\n    };\n    /**\n     * _forceRemove\n     *\n     * @param  {Node} node a DOM node\n     */\n\n\n    var _forceRemove = function _forceRemove(node) {\n      arrayPush(DOMPurify.removed, {\n        element: node\n      });\n\n      try {\n        node.parentNode.removeChild(node);\n      } catch (error) {\n        node.outerHTML = emptyHTML;\n      }\n    };\n    /**\n     * _removeAttribute\n     *\n     * @param  {String} name an Attribute name\n     * @param  {Node} node a DOM node\n     */\n\n\n    var _removeAttribute = function _removeAttribute(name, node) {\n      try {\n        arrayPush(DOMPurify.removed, {\n          attribute: node.getAttributeNode(name),\n          from: node\n        });\n      } catch (error) {\n        arrayPush(DOMPurify.removed, {\n          attribute: null,\n          from: node\n        });\n      }\n\n      node.removeAttribute(name);\n    };\n    /**\n     * _initDocument\n     *\n     * @param  {String} dirty a string of dirty markup\n     * @return {Document} a DOM, filled with the dirty markup\n     */\n\n\n    var _initDocument = function _initDocument(dirty) {\n      /* Create a HTML document */\n      var doc = void 0;\n      var leadingWhitespace = void 0;\n\n      if (FORCE_BODY) {\n        dirty = '<remove></remove>' + dirty;\n      } else {\n        /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n        var matches = stringMatch(dirty, /^[\\s]+/);\n        leadingWhitespace = matches && matches[0];\n      }\n\n      var dirtyPayload = trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n      /* Use DOMParser to workaround Firefox bug (see comment below) */\n\n      if (useDOMParser) {\n        try {\n          doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');\n        } catch (error) {}\n      }\n      /* Remove title to fix a mXSS bug in older MS Edge */\n\n\n      if (removeTitle) {\n        addToSet(FORBID_TAGS, ['title']);\n      }\n      /* Otherwise use createHTMLDocument, because DOMParser is unsafe in\n      Safari (see comment below) */\n\n\n      if (!doc || !doc.documentElement) {\n        doc = implementation.createHTMLDocument('');\n        var _doc = doc,\n            body = _doc.body;\n        body.parentNode.removeChild(body.parentNode.firstElementChild);\n        body.outerHTML = dirtyPayload;\n      }\n\n      if (dirty && leadingWhitespace) {\n        doc.body.insertBefore(document.createTextNode(leadingWhitespace), doc.body.childNodes[0] || null);\n      }\n      /* Work on whole document or just its body */\n\n\n      return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n    }; // Firefox uses a different parser for innerHTML rather than\n    // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)\n    // which means that you *must* use DOMParser, otherwise the output may\n    // not be safe if used in a document.write context later.\n    //\n    // So we feature detect the Firefox bug and use the DOMParser if necessary.\n    //\n    // Chrome 77 and other versions ship an mXSS bug that caused a bypass to\n    // happen. We now check for the mXSS trigger and react accordingly.\n\n\n    if (DOMPurify.isSupported) {\n      (function () {\n        try {\n          var doc = _initDocument('<svg><p><textarea><img src=\"</textarea><img src=x abc=1//\">');\n\n          if (doc.querySelector('svg img')) {\n            useDOMParser = true;\n          }\n        } catch (error) {}\n      })();\n\n      (function () {\n        try {\n          var doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');\n\n          if (regExpTest(/<\\/title/, doc.querySelector('title').innerHTML)) {\n            removeTitle = true;\n          }\n        } catch (error) {}\n      })();\n    }\n    /**\n     * _createIterator\n     *\n     * @param  {Document} root document/fragment to create iterator for\n     * @return {Iterator} iterator instance\n     */\n\n\n    var _createIterator = function _createIterator(root) {\n      return createNodeIterator.call(root.ownerDocument || root, root, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT, function () {\n        return NodeFilter.FILTER_ACCEPT;\n      }, false);\n    };\n    /**\n     * _isClobbered\n     *\n     * @param  {Node} elm element to check for clobbering attacks\n     * @return {Boolean} true if clobbered, false if safe\n     */\n\n\n    var _isClobbered = function _isClobbered(elm) {\n      if (elm instanceof Text || elm instanceof Comment) {\n        return false;\n      }\n\n      if (typeof elm.nodeName !== 'string' || typeof elm.textContent !== 'string' || typeof elm.removeChild !== 'function' || !(elm.attributes instanceof NamedNodeMap) || typeof elm.removeAttribute !== 'function' || typeof elm.setAttribute !== 'function' || typeof elm.namespaceURI !== 'string') {\n        return true;\n      }\n\n      return false;\n    };\n    /**\n     * _isNode\n     *\n     * @param  {Node} obj object to check whether it's a DOM node\n     * @return {Boolean} true is object is a DOM node\n     */\n\n\n    var _isNode = function _isNode(obj) {\n      return (typeof Node === 'undefined' ? 'undefined' : _typeof(Node)) === 'object' ? obj instanceof Node : obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';\n    };\n    /**\n     * _executeHook\n     * Execute user configurable hooks\n     *\n     * @param  {String} entryPoint  Name of the hook's entry point\n     * @param  {Node} currentNode node to work on with the hook\n     * @param  {Object} data additional hook parameters\n     */\n\n\n    var _executeHook = function _executeHook(entryPoint, currentNode, data) {\n      if (!hooks[entryPoint]) {\n        return;\n      }\n\n      arrayForEach(hooks[entryPoint], function (hook) {\n        hook.call(DOMPurify, currentNode, data, CONFIG);\n      });\n    };\n    /**\n     * _sanitizeElements\n     *\n     * @protect nodeName\n     * @protect textContent\n     * @protect removeChild\n     *\n     * @param   {Node} currentNode to check for permission to exist\n     * @return  {Boolean} true if node was killed, false if left alive\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _sanitizeElements = function _sanitizeElements(currentNode) {\n      var content = void 0;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeElements', currentNode, null);\n      /* Check if element is clobbered or can clobber */\n\n\n      if (_isClobbered(currentNode)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Now let's check the element's type and name */\n\n\n      var tagName = stringToLowerCase(currentNode.nodeName);\n      /* Execute a hook if present */\n\n      _executeHook('uponSanitizeElement', currentNode, {\n        tagName: tagName,\n        allowedTags: ALLOWED_TAGS\n      });\n      /* Take care of an mXSS pattern using p, br inside svg, math */\n\n\n      if ((tagName === 'svg' || tagName === 'math') && currentNode.querySelectorAll('p, br').length !== 0) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove element if anything forbids its presence */\n\n\n      if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n        /* Keep content except for black-listed elements */\n        if (KEEP_CONTENT && !FORBID_CONTENTS[tagName] && typeof currentNode.insertAdjacentHTML === 'function') {\n          try {\n            var htmlToInsert = currentNode.innerHTML;\n            currentNode.insertAdjacentHTML('AfterEnd', trustedTypesPolicy ? trustedTypesPolicy.createHTML(htmlToInsert) : htmlToInsert);\n          } catch (error) {}\n        }\n\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Remove in case a noscript/noembed XSS is suspected */\n\n\n      if (tagName === 'noscript' && regExpTest(/<\\/noscript/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n\n      if (tagName === 'noembed' && regExpTest(/<\\/noembed/i, currentNode.innerHTML)) {\n        _forceRemove(currentNode);\n\n        return true;\n      }\n      /* Convert markup to cover jQuery behavior */\n\n\n      if (SAFE_FOR_JQUERY && !currentNode.firstElementChild && (!currentNode.content || !currentNode.content.firstElementChild) && regExpTest(/</g, currentNode.textContent)) {\n        arrayPush(DOMPurify.removed, {\n          element: currentNode.cloneNode()\n        });\n\n        if (currentNode.innerHTML) {\n          currentNode.innerHTML = stringReplace(currentNode.innerHTML, /</g, '&lt;');\n        } else {\n          currentNode.innerHTML = stringReplace(currentNode.textContent, /</g, '&lt;');\n        }\n      }\n      /* Sanitize element content to be template-safe */\n\n\n      if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n        /* Get the element's text content */\n        content = currentNode.textContent;\n        content = stringReplace(content, MUSTACHE_EXPR$$1, ' ');\n        content = stringReplace(content, ERB_EXPR$$1, ' ');\n\n        if (currentNode.textContent !== content) {\n          arrayPush(DOMPurify.removed, {\n            element: currentNode.cloneNode()\n          });\n          currentNode.textContent = content;\n        }\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeElements', currentNode, null);\n\n      return false;\n    };\n    /**\n     * _isValidAttribute\n     *\n     * @param  {string} lcTag Lowercase tag name of containing element.\n     * @param  {string} lcName Lowercase attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid, otherwise false.\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _isValidAttribute = function _isValidAttribute(lcTag, lcName, value) {\n      /* Make sure attribute cannot clobber */\n      if (SANITIZE_DOM && (lcName === 'id' || lcName === 'name') && (value in document || value in formElement)) {\n        return false;\n      }\n      /* Allow valid data-* attributes: At least one character after \"-\"\n          (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n          XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n          We don't need to check the value; it's always URI safe. */\n\n\n      if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR$$1, lcName)) {// This attribute is safe\n      } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR$$1, lcName)) {// This attribute is safe\n\n        /* Otherwise, check the name is permitted */\n      } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n        return false;\n        /* Check value is safe. First, is attr inert? If so, is safe */\n      } else if (URI_SAFE_ATTRIBUTES[lcName]) {// This attribute is safe\n\n        /* Check no script, data or unknown possibly unsafe URI\n          unless we know URI values are safe for that attribute */\n      } else if (regExpTest(IS_ALLOWED_URI$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) {// This attribute is safe\n\n        /* Keep image data URIs alive if src/xlink:href is allowed */\n\n        /* Further prevent gadget XSS for dynamically built script tags */\n      } else if ((lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') && lcTag !== 'script' && stringIndexOf(value, 'data:') === 0 && DATA_URI_TAGS[lcTag]) {// This attribute is safe\n\n        /* Allow unknown protocols: This provides support for links that\n          are handled by protocol handlers which may be unknown ahead of\n          time, e.g. fb:, spotify: */\n      } else if (ALLOW_UNKNOWN_PROTOCOLS && !regExpTest(IS_SCRIPT_OR_DATA$$1, stringReplace(value, ATTR_WHITESPACE$$1, ''))) {// This attribute is safe\n\n        /* Check for binary attributes */\n        // eslint-disable-next-line no-negated-condition\n      } else if (!value) {// Binary attributes are safe at this point\n\n        /* Anything else, presume unsafe, do not add it back */\n      } else {\n        return false;\n      }\n\n      return true;\n    };\n    /**\n     * _sanitizeAttributes\n     *\n     * @protect attributes\n     * @protect nodeName\n     * @protect removeAttribute\n     * @protect setAttribute\n     *\n     * @param  {Node} currentNode to sanitize\n     */\n    // eslint-disable-next-line complexity\n\n\n    var _sanitizeAttributes = function _sanitizeAttributes(currentNode) {\n      var attr = void 0;\n      var value = void 0;\n      var lcName = void 0;\n      var idAttr = void 0;\n      var l = void 0;\n      /* Execute a hook if present */\n\n      _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n      var attributes = currentNode.attributes;\n      /* Check if we have attributes; if not we might have a text node */\n\n      if (!attributes) {\n        return;\n      }\n\n      var hookEvent = {\n        attrName: '',\n        attrValue: '',\n        keepAttr: true,\n        allowedAttributes: ALLOWED_ATTR\n      };\n      l = attributes.length;\n      /* Go backwards over all attributes; safely remove bad ones */\n\n      while (l--) {\n        attr = attributes[l];\n        var _attr = attr,\n            name = _attr.name,\n            namespaceURI = _attr.namespaceURI;\n        value = stringTrim(attr.value);\n        lcName = stringToLowerCase(name);\n        /* Execute a hook if present */\n\n        hookEvent.attrName = lcName;\n        hookEvent.attrValue = value;\n        hookEvent.keepAttr = true;\n        hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n\n        _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n\n        value = hookEvent.attrValue;\n        /* Did the hooks approve of the attribute? */\n\n        if (hookEvent.forceKeepAttr) {\n          continue;\n        }\n        /* Remove attribute */\n        // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n        // remove a \"name\" attribute from an <img> tag that has an \"id\"\n        // attribute at the time.\n\n\n        if (lcName === 'name' && currentNode.nodeName === 'IMG' && attributes.id) {\n          idAttr = attributes.id;\n          attributes = arraySlice(attributes, []);\n\n          _removeAttribute('id', currentNode);\n\n          _removeAttribute(name, currentNode);\n\n          if (arrayIndexOf(attributes, idAttr) > l) {\n            currentNode.setAttribute('id', idAttr.value);\n          }\n        } else if ( // This works around a bug in Safari, where input[type=file]\n        // cannot be dynamically set after type has been removed\n        currentNode.nodeName === 'INPUT' && lcName === 'type' && value === 'file' && hookEvent.keepAttr && (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])) {\n          continue;\n        } else {\n          // This avoids a crash in Safari v9.0 with double-ids.\n          // The trick is to first set the id to be empty and then to\n          // remove the attribute\n          if (name === 'id') {\n            currentNode.setAttribute(name, '');\n          }\n\n          _removeAttribute(name, currentNode);\n        }\n        /* Did the hooks approve of the attribute? */\n\n\n        if (!hookEvent.keepAttr) {\n          continue;\n        }\n        /* Work around a security issue in jQuery 3.0 */\n\n\n        if (SAFE_FOR_JQUERY && regExpTest(/\\/>/i, value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Take care of an mXSS pattern using namespace switches */\n\n\n        if (regExpTest(/svg|math/i, currentNode.namespaceURI) && regExpTest(regExpCreate('</(' + arrayJoin(objectKeys(FORBID_CONTENTS), '|') + ')', 'i'), value)) {\n          _removeAttribute(name, currentNode);\n\n          continue;\n        }\n        /* Sanitize attribute content to be template-safe */\n\n\n        if (SAFE_FOR_TEMPLATES) {\n          value = stringReplace(value, MUSTACHE_EXPR$$1, ' ');\n          value = stringReplace(value, ERB_EXPR$$1, ' ');\n        }\n        /* Is `value` valid for this attribute? */\n\n\n        var lcTag = currentNode.nodeName.toLowerCase();\n\n        if (!_isValidAttribute(lcTag, lcName, value)) {\n          continue;\n        }\n        /* Handle invalid data-* attribute set by try-catching it */\n\n\n        try {\n          if (namespaceURI) {\n            currentNode.setAttributeNS(namespaceURI, name, value);\n          } else {\n            /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n            currentNode.setAttribute(name, value);\n          }\n\n          arrayPop(DOMPurify.removed);\n        } catch (error) {}\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeAttributes', currentNode, null);\n    };\n    /**\n     * _sanitizeShadowDOM\n     *\n     * @param  {DocumentFragment} fragment to iterate over recursively\n     */\n\n\n    var _sanitizeShadowDOM = function _sanitizeShadowDOM(fragment) {\n      var shadowNode = void 0;\n\n      var shadowIterator = _createIterator(fragment);\n      /* Execute a hook if present */\n\n\n      _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n      while (shadowNode = shadowIterator.nextNode()) {\n        /* Execute a hook if present */\n        _executeHook('uponSanitizeShadowNode', shadowNode, null);\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(shadowNode)) {\n          continue;\n        }\n        /* Deep shadow DOM detected */\n\n\n        if (shadowNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(shadowNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(shadowNode);\n      }\n      /* Execute a hook if present */\n\n\n      _executeHook('afterSanitizeShadowDOM', fragment, null);\n    };\n    /**\n     * Sanitize\n     * Public method providing core sanitation functionality\n     *\n     * @param {String|Node} dirty string or DOM node\n     * @param {Object} configuration object\n     */\n    // eslint-disable-next-line complexity\n\n\n    DOMPurify.sanitize = function (dirty, cfg) {\n      var body = void 0;\n      var importedNode = void 0;\n      var currentNode = void 0;\n      var oldNode = void 0;\n      var returnNode = void 0;\n      /* Make sure we have a string to sanitize.\n        DO NOT return early, as this will return the wrong type if\n        the user has requested a DOM object rather than a string */\n\n      if (!dirty) {\n        dirty = '<!-->';\n      }\n      /* Stringify, in case dirty is an object */\n\n\n      if (typeof dirty !== 'string' && !_isNode(dirty)) {\n        // eslint-disable-next-line no-negated-condition\n        if (typeof dirty.toString !== 'function') {\n          throw typeErrorCreate('toString is not a function');\n        } else {\n          dirty = dirty.toString();\n\n          if (typeof dirty !== 'string') {\n            throw typeErrorCreate('dirty is not a string, aborting');\n          }\n        }\n      }\n      /* Check we can run. Otherwise fall back or ignore */\n\n\n      if (!DOMPurify.isSupported) {\n        if (_typeof(window.toStaticHTML) === 'object' || typeof window.toStaticHTML === 'function') {\n          if (typeof dirty === 'string') {\n            return window.toStaticHTML(dirty);\n          }\n\n          if (_isNode(dirty)) {\n            return window.toStaticHTML(dirty.outerHTML);\n          }\n        }\n\n        return dirty;\n      }\n      /* Assign config vars */\n\n\n      if (!SET_CONFIG) {\n        _parseConfig(cfg);\n      }\n      /* Clean up removed elements */\n\n\n      DOMPurify.removed = [];\n      /* Check if dirty is correctly typed for IN_PLACE */\n\n      if (typeof dirty === 'string') {\n        IN_PLACE = false;\n      }\n\n      if (IN_PLACE) {\n        /* No special handling necessary for in-place sanitization */\n      } else if (dirty instanceof Node) {\n        /* If dirty is a DOM element, append to an empty document to avoid\n           elements being stripped by the parser */\n        body = _initDocument('<!-->');\n        importedNode = body.ownerDocument.importNode(dirty, true);\n\n        if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n          /* Node is already a body, use as is */\n          body = importedNode;\n        } else if (importedNode.nodeName === 'HTML') {\n          body = importedNode;\n        } else {\n          // eslint-disable-next-line unicorn/prefer-node-append\n          body.appendChild(importedNode);\n        }\n      } else {\n        /* Exit directly if we have nothing to do */\n        if (!RETURN_DOM && !SAFE_FOR_TEMPLATES && !WHOLE_DOCUMENT && RETURN_TRUSTED_TYPE && dirty.indexOf('<') === -1) {\n          return trustedTypesPolicy ? trustedTypesPolicy.createHTML(dirty) : dirty;\n        }\n        /* Initialize the document to work on */\n\n\n        body = _initDocument(dirty);\n        /* Check we have a DOM node from the data */\n\n        if (!body) {\n          return RETURN_DOM ? null : emptyHTML;\n        }\n      }\n      /* Remove first element node (ours) if FORCE_BODY is set */\n\n\n      if (body && FORCE_BODY) {\n        _forceRemove(body.firstChild);\n      }\n      /* Get node iterator */\n\n\n      var nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n      /* Now start iterating over the created document */\n\n\n      while (currentNode = nodeIterator.nextNode()) {\n        /* Fix IE's strange behavior with manipulated textNodes #89 */\n        if (currentNode.nodeType === 3 && currentNode === oldNode) {\n          continue;\n        }\n        /* Sanitize tags and elements */\n\n\n        if (_sanitizeElements(currentNode)) {\n          continue;\n        }\n        /* Shadow DOM detected, sanitize it */\n\n\n        if (currentNode.content instanceof DocumentFragment) {\n          _sanitizeShadowDOM(currentNode.content);\n        }\n        /* Check attributes, sanitize if necessary */\n\n\n        _sanitizeAttributes(currentNode);\n\n        oldNode = currentNode;\n      }\n\n      oldNode = null;\n      /* If we sanitized `dirty` in-place, return it. */\n\n      if (IN_PLACE) {\n        return dirty;\n      }\n      /* Return sanitized string or DOM */\n\n\n      if (RETURN_DOM) {\n        if (RETURN_DOM_FRAGMENT) {\n          returnNode = createDocumentFragment.call(body.ownerDocument);\n\n          while (body.firstChild) {\n            // eslint-disable-next-line unicorn/prefer-node-append\n            returnNode.appendChild(body.firstChild);\n          }\n        } else {\n          returnNode = body;\n        }\n\n        if (RETURN_DOM_IMPORT) {\n          /* AdoptNode() is not used because internal state is not reset\n                 (e.g. the past names map of a HTMLFormElement), this is safe\n                 in theory but we would rather not risk another attack vector.\n                 The state that is cloned by importNode() is explicitly defined\n                 by the specs. */\n          returnNode = importNode.call(originalDocument, returnNode, true);\n        }\n\n        return returnNode;\n      }\n\n      var serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n      /* Sanitize final string template-safe */\n\n      if (SAFE_FOR_TEMPLATES) {\n        serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR$$1, ' ');\n        serializedHTML = stringReplace(serializedHTML, ERB_EXPR$$1, ' ');\n      }\n\n      return trustedTypesPolicy && RETURN_TRUSTED_TYPE ? trustedTypesPolicy.createHTML(serializedHTML) : serializedHTML;\n    };\n    /**\n     * Public method to set the configuration once\n     * setConfig\n     *\n     * @param {Object} cfg configuration object\n     */\n\n\n    DOMPurify.setConfig = function (cfg) {\n      _parseConfig(cfg);\n\n      SET_CONFIG = true;\n    };\n    /**\n     * Public method to remove the configuration\n     * clearConfig\n     *\n     */\n\n\n    DOMPurify.clearConfig = function () {\n      CONFIG = null;\n      SET_CONFIG = false;\n    };\n    /**\n     * Public method to check if an attribute value is valid.\n     * Uses last set config, if any. Otherwise, uses config defaults.\n     * isValidAttribute\n     *\n     * @param  {string} tag Tag name of containing element.\n     * @param  {string} attr Attribute name.\n     * @param  {string} value Attribute value.\n     * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n     */\n\n\n    DOMPurify.isValidAttribute = function (tag, attr, value) {\n      /* Initialize shared config vars if necessary. */\n      if (!CONFIG) {\n        _parseConfig({});\n      }\n\n      var lcTag = stringToLowerCase(tag);\n      var lcName = stringToLowerCase(attr);\n      return _isValidAttribute(lcTag, lcName, value);\n    };\n    /**\n     * AddHook\n     * Public method to add DOMPurify hooks\n     *\n     * @param {String} entryPoint entry point for the hook to add\n     * @param {Function} hookFunction function to execute\n     */\n\n\n    DOMPurify.addHook = function (entryPoint, hookFunction) {\n      if (typeof hookFunction !== 'function') {\n        return;\n      }\n\n      hooks[entryPoint] = hooks[entryPoint] || [];\n      arrayPush(hooks[entryPoint], hookFunction);\n    };\n    /**\n     * RemoveHook\n     * Public method to remove a DOMPurify hook at a given entryPoint\n     * (pops it from the stack of hooks if more are present)\n     *\n     * @param {String} entryPoint entry point for the hook to remove\n     */\n\n\n    DOMPurify.removeHook = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        arrayPop(hooks[entryPoint]);\n      }\n    };\n    /**\n     * RemoveHooks\n     * Public method to remove all DOMPurify hooks at a given entryPoint\n     *\n     * @param  {String} entryPoint entry point for the hooks to remove\n     */\n\n\n    DOMPurify.removeHooks = function (entryPoint) {\n      if (hooks[entryPoint]) {\n        hooks[entryPoint] = [];\n      }\n    };\n    /**\n     * RemoveAllHooks\n     * Public method to remove all DOMPurify hooks\n     *\n     */\n\n\n    DOMPurify.removeAllHooks = function () {\n      hooks = {};\n    };\n\n    return DOMPurify;\n  }\n\n  var purify = createDOMPurify();\n  return purify;\n});","map":{"version":3,"sources":["../src/utils.js","../src/tags.js","../src/attrs.js","../src/regexp.js","../src/purify.js"],"names":["hasOwnProperty","setPrototypeOf","isFrozen","keys","objectKeys","Object","freeze","seal","apply","construct","Reflect","fun","arrayForEach","unapply","Array","arrayIndexOf","arrayJoin","arrayPop","arrayPush","arraySlice","stringToLowerCase","String","stringMatch","stringReplace","stringIndexOf","stringTrim","regExpTest","RegExp","regExpCreate","unconstruct","typeErrorCreate","args","l","array","element","lcElement","newObject","property","object","html","svg","svgFilters","mathMl","text","xml","MUSTACHE_EXPR","ERB_EXPR","DATA_ATTR","ARIA_ATTR","IS_ALLOWED_URI","IS_SCRIPT_OR_DATA","ATTR_WHITESPACE","getGlobal","_createTrustedTypesPolicy","trustedTypes","suffix","ATTR_NAME","document","policyName","window","DOMPurify","createDOMPurify","originalDocument","useDOMParser","removeTitle","DocumentFragment","HTMLTemplateElement","Node","NodeFilter","NamedNodeMap","Text","Comment","DOMParser","template","trustedTypesPolicy","emptyHTML","implementation","createNodeIterator","getElementsByTagName","createDocumentFragment","importNode","hooks","ALLOWED_TAGS","DEFAULT_ALLOWED_TAGS","addToSet","ALLOWED_ATTR","DEFAULT_ALLOWED_ATTR","FORBID_TAGS","FORBID_ATTR","ALLOW_ARIA_ATTR","ALLOW_DATA_ATTR","ALLOW_UNKNOWN_PROTOCOLS","SAFE_FOR_JQUERY","SAFE_FOR_TEMPLATES","WHOLE_DOCUMENT","SET_CONFIG","FORCE_BODY","RETURN_DOM","RETURN_DOM_FRAGMENT","RETURN_DOM_IMPORT","RETURN_TRUSTED_TYPE","SANITIZE_DOM","KEEP_CONTENT","IN_PLACE","USE_PROFILES","FORBID_CONTENTS","DATA_URI_TAGS","URI_SAFE_ATTRIBUTES","DEFAULT_URI_SAFE_ATTRIBUTES","CONFIG","formElement","_parseConfig","cfg","clone","_forceRemove","_removeAttribute","node","_initDocument","doc","leadingWhitespace","matches","dirtyPayload","body","dirty","_createIterator","root","_isClobbered","elm","_isNode","obj","_executeHook","_sanitizeElements","content","tagName","currentNode","htmlToInsert","_isValidAttribute","lcName","value","lcTag","_sanitizeAttributes","attr","idAttr","attributes","hookEvent","name","namespaceURI","_sanitizeShadowDOM","shadowNode","shadowIterator","importedNode","oldNode","returnNode","nodeIterator","serializedHTML"],"mappings":"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","sourcesContent":["const { hasOwnProperty, setPrototypeOf, isFrozen, keys: objectKeys } = Object;\n\nlet { freeze, seal } = Object; // eslint-disable-line import/no-mutable-exports\nlet { apply, construct } = typeof Reflect !== 'undefined' && Reflect;\n\nif (!apply) {\n  apply = function(fun, thisValue, args) {\n    return fun.apply(thisValue, args);\n  };\n}\n\nif (!freeze) {\n  freeze = function(x) {\n    return x;\n  };\n}\n\nif (!seal) {\n  seal = function(x) {\n    return x;\n  };\n}\n\nif (!construct) {\n  construct = function(Func, args) {\n    return new Func(...args);\n  };\n}\n\nconst arrayForEach = unapply(Array.prototype.forEach);\nconst arrayIndexOf = unapply(Array.prototype.indexOf);\nconst arrayJoin = unapply(Array.prototype.join);\nconst arrayPop = unapply(Array.prototype.pop);\nconst arrayPush = unapply(Array.prototype.push);\nconst arraySlice = unapply(Array.prototype.slice);\n\nconst stringToLowerCase = unapply(String.prototype.toLowerCase);\nconst stringMatch = unapply(String.prototype.match);\nconst stringReplace = unapply(String.prototype.replace);\nconst stringIndexOf = unapply(String.prototype.indexOf);\nconst stringTrim = unapply(String.prototype.trim);\n\nconst regExpTest = unapply(RegExp.prototype.test);\nconst regExpCreate = unconstruct(RegExp);\n\nconst typeErrorCreate = unconstruct(TypeError);\n\nexport function unapply(func) {\n  return (thisArg, ...args) => apply(func, thisArg, args);\n}\n\nexport function unconstruct(func) {\n  return (...args) => construct(func, args);\n}\n\n/* Add properties to a lookup table */\nexport function addToSet(set, array) {\n  if (setPrototypeOf) {\n    // Make 'in' and truthy checks like Boolean(set.constructor)\n    // independent of any properties defined on Object.prototype.\n    // Prevent prototype setters from intercepting set as a this value.\n    setPrototypeOf(set, null);\n  }\n\n  let l = array.length;\n  while (l--) {\n    let element = array[l];\n    if (typeof element === 'string') {\n      const lcElement = stringToLowerCase(element);\n      if (lcElement !== element) {\n        // Config presets (e.g. tags.js, attrs.js) are immutable.\n        if (!isFrozen(array)) {\n          array[l] = lcElement;\n        }\n\n        element = lcElement;\n      }\n    }\n\n    set[element] = true;\n  }\n\n  return set;\n}\n\n/* Shallow clone an object */\nexport function clone(object) {\n  const newObject = {};\n\n  let property;\n  for (property in object) {\n    if (apply(hasOwnProperty, object, [property])) {\n      newObject[property] = object[property];\n    }\n  }\n\n  return newObject;\n}\n\nexport {\n  // Array\n  arrayForEach,\n  arrayIndexOf,\n  arrayJoin,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  // Object\n  freeze,\n  hasOwnProperty,\n  isFrozen,\n  objectKeys,\n  setPrototypeOf,\n  seal,\n  // RegExp\n  regExpCreate,\n  regExpTest,\n  // String\n  stringIndexOf,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringTrim,\n  // Errors\n  typeErrorCreate,\n};\n","import { freeze } from './utils';\n\nexport const html = freeze([\n  'a',\n  'abbr',\n  'acronym',\n  'address',\n  'area',\n  'article',\n  'aside',\n  'audio',\n  'b',\n  'bdi',\n  'bdo',\n  'big',\n  'blink',\n  'blockquote',\n  'body',\n  'br',\n  'button',\n  'canvas',\n  'caption',\n  'center',\n  'cite',\n  'code',\n  'col',\n  'colgroup',\n  'content',\n  'data',\n  'datalist',\n  'dd',\n  'decorator',\n  'del',\n  'details',\n  'dfn',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'element',\n  'em',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'font',\n  'footer',\n  'form',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hgroup',\n  'hr',\n  'html',\n  'i',\n  'img',\n  'input',\n  'ins',\n  'kbd',\n  'label',\n  'legend',\n  'li',\n  'main',\n  'map',\n  'mark',\n  'marquee',\n  'menu',\n  'menuitem',\n  'meter',\n  'nav',\n  'nobr',\n  'ol',\n  'optgroup',\n  'option',\n  'output',\n  'p',\n  'picture',\n  'pre',\n  'progress',\n  'q',\n  'rp',\n  'rt',\n  'ruby',\n  's',\n  'samp',\n  'section',\n  'select',\n  'shadow',\n  'small',\n  'source',\n  'spacer',\n  'span',\n  'strike',\n  'strong',\n  'style',\n  'sub',\n  'summary',\n  'sup',\n  'table',\n  'tbody',\n  'td',\n  'template',\n  'textarea',\n  'tfoot',\n  'th',\n  'thead',\n  'time',\n  'tr',\n  'track',\n  'tt',\n  'u',\n  'ul',\n  'var',\n  'video',\n  'wbr',\n]);\n\n// SVG\nexport const svg = freeze([\n  'svg',\n  'a',\n  'altglyph',\n  'altglyphdef',\n  'altglyphitem',\n  'animatecolor',\n  'animatemotion',\n  'animatetransform',\n  'audio',\n  'canvas',\n  'circle',\n  'clippath',\n  'defs',\n  'desc',\n  'ellipse',\n  'filter',\n  'font',\n  'g',\n  'glyph',\n  'glyphref',\n  'hkern',\n  'image',\n  'line',\n  'lineargradient',\n  'marker',\n  'mask',\n  'metadata',\n  'mpath',\n  'path',\n  'pattern',\n  'polygon',\n  'polyline',\n  'radialgradient',\n  'rect',\n  'stop',\n  'style',\n  'switch',\n  'symbol',\n  'text',\n  'textpath',\n  'title',\n  'tref',\n  'tspan',\n  'video',\n  'view',\n  'vkern',\n]);\n\nexport const svgFilters = freeze([\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n]);\n\nexport const mathMl = freeze([\n  'math',\n  'menclose',\n  'merror',\n  'mfenced',\n  'mfrac',\n  'mglyph',\n  'mi',\n  'mlabeledtr',\n  'mmultiscripts',\n  'mn',\n  'mo',\n  'mover',\n  'mpadded',\n  'mphantom',\n  'mroot',\n  'mrow',\n  'ms',\n  'mspace',\n  'msqrt',\n  'mstyle',\n  'msub',\n  'msup',\n  'msubsup',\n  'mtable',\n  'mtd',\n  'mtext',\n  'mtr',\n  'munder',\n  'munderover',\n]);\n\nexport const text = freeze(['#text']);\n","import { freeze } from './utils';\n\nexport const html = freeze([\n  'accept',\n  'action',\n  'align',\n  'alt',\n  'autocomplete',\n  'background',\n  'bgcolor',\n  'border',\n  'cellpadding',\n  'cellspacing',\n  'checked',\n  'cite',\n  'class',\n  'clear',\n  'color',\n  'cols',\n  'colspan',\n  'controls',\n  'coords',\n  'crossorigin',\n  'datetime',\n  'default',\n  'dir',\n  'disabled',\n  'download',\n  'enctype',\n  'face',\n  'for',\n  'headers',\n  'height',\n  'hidden',\n  'high',\n  'href',\n  'hreflang',\n  'id',\n  'integrity',\n  'ismap',\n  'label',\n  'lang',\n  'list',\n  'loop',\n  'low',\n  'max',\n  'maxlength',\n  'media',\n  'method',\n  'min',\n  'minlength',\n  'multiple',\n  'name',\n  'noshade',\n  'novalidate',\n  'nowrap',\n  'open',\n  'optimum',\n  'pattern',\n  'placeholder',\n  'poster',\n  'preload',\n  'pubdate',\n  'radiogroup',\n  'readonly',\n  'rel',\n  'required',\n  'rev',\n  'reversed',\n  'role',\n  'rows',\n  'rowspan',\n  'spellcheck',\n  'scope',\n  'selected',\n  'shape',\n  'size',\n  'sizes',\n  'span',\n  'srclang',\n  'start',\n  'src',\n  'srcset',\n  'step',\n  'style',\n  'summary',\n  'tabindex',\n  'title',\n  'type',\n  'usemap',\n  'valign',\n  'value',\n  'width',\n  'xmlns',\n]);\n\nexport const svg = freeze([\n  'accent-height',\n  'accumulate',\n  'additive',\n  'alignment-baseline',\n  'ascent',\n  'attributename',\n  'attributetype',\n  'azimuth',\n  'basefrequency',\n  'baseline-shift',\n  'begin',\n  'bias',\n  'by',\n  'class',\n  'clip',\n  'clip-path',\n  'clip-rule',\n  'color',\n  'color-interpolation',\n  'color-interpolation-filters',\n  'color-profile',\n  'color-rendering',\n  'cx',\n  'cy',\n  'd',\n  'dx',\n  'dy',\n  'diffuseconstant',\n  'direction',\n  'display',\n  'divisor',\n  'dur',\n  'edgemode',\n  'elevation',\n  'end',\n  'fill',\n  'fill-opacity',\n  'fill-rule',\n  'filter',\n  'filterunits',\n  'flood-color',\n  'flood-opacity',\n  'font-family',\n  'font-size',\n  'font-size-adjust',\n  'font-stretch',\n  'font-style',\n  'font-variant',\n  'font-weight',\n  'fx',\n  'fy',\n  'g1',\n  'g2',\n  'glyph-name',\n  'glyphref',\n  'gradientunits',\n  'gradienttransform',\n  'height',\n  'href',\n  'id',\n  'image-rendering',\n  'in',\n  'in2',\n  'k',\n  'k1',\n  'k2',\n  'k3',\n  'k4',\n  'kerning',\n  'keypoints',\n  'keysplines',\n  'keytimes',\n  'lang',\n  'lengthadjust',\n  'letter-spacing',\n  'kernelmatrix',\n  'kernelunitlength',\n  'lighting-color',\n  'local',\n  'marker-end',\n  'marker-mid',\n  'marker-start',\n  'markerheight',\n  'markerunits',\n  'markerwidth',\n  'maskcontentunits',\n  'maskunits',\n  'max',\n  'mask',\n  'media',\n  'method',\n  'mode',\n  'min',\n  'name',\n  'numoctaves',\n  'offset',\n  'operator',\n  'opacity',\n  'order',\n  'orient',\n  'orientation',\n  'origin',\n  'overflow',\n  'paint-order',\n  'path',\n  'pathlength',\n  'patterncontentunits',\n  'patterntransform',\n  'patternunits',\n  'points',\n  'preservealpha',\n  'preserveaspectratio',\n  'primitiveunits',\n  'r',\n  'rx',\n  'ry',\n  'radius',\n  'refx',\n  'refy',\n  'repeatcount',\n  'repeatdur',\n  'restart',\n  'result',\n  'rotate',\n  'scale',\n  'seed',\n  'shape-rendering',\n  'specularconstant',\n  'specularexponent',\n  'spreadmethod',\n  'stddeviation',\n  'stitchtiles',\n  'stop-color',\n  'stop-opacity',\n  'stroke-dasharray',\n  'stroke-dashoffset',\n  'stroke-linecap',\n  'stroke-linejoin',\n  'stroke-miterlimit',\n  'stroke-opacity',\n  'stroke',\n  'stroke-width',\n  'style',\n  'surfacescale',\n  'tabindex',\n  'targetx',\n  'targety',\n  'transform',\n  'text-anchor',\n  'text-decoration',\n  'text-rendering',\n  'textlength',\n  'type',\n  'u1',\n  'u2',\n  'unicode',\n  'values',\n  'viewbox',\n  'visibility',\n  'version',\n  'vert-adv-y',\n  'vert-origin-x',\n  'vert-origin-y',\n  'width',\n  'word-spacing',\n  'wrap',\n  'writing-mode',\n  'xchannelselector',\n  'ychannelselector',\n  'x',\n  'x1',\n  'x2',\n  'xmlns',\n  'y',\n  'y1',\n  'y2',\n  'z',\n  'zoomandpan',\n]);\n\nexport const mathMl = freeze([\n  'accent',\n  'accentunder',\n  'align',\n  'bevelled',\n  'close',\n  'columnsalign',\n  'columnlines',\n  'columnspan',\n  'denomalign',\n  'depth',\n  'dir',\n  'display',\n  'displaystyle',\n  'encoding',\n  'fence',\n  'frame',\n  'height',\n  'href',\n  'id',\n  'largeop',\n  'length',\n  'linethickness',\n  'lspace',\n  'lquote',\n  'mathbackground',\n  'mathcolor',\n  'mathsize',\n  'mathvariant',\n  'maxsize',\n  'minsize',\n  'movablelimits',\n  'notation',\n  'numalign',\n  'open',\n  'rowalign',\n  'rowlines',\n  'rowspacing',\n  'rowspan',\n  'rspace',\n  'rquote',\n  'scriptlevel',\n  'scriptminsize',\n  'scriptsizemultiplier',\n  'selection',\n  'separator',\n  'separators',\n  'stretchy',\n  'subscriptshift',\n  'supscriptshift',\n  'symmetric',\n  'voffset',\n  'width',\n  'xmlns',\n]);\n\nexport const xml = freeze([\n  'xlink:href',\n  'xml:id',\n  'xlink:title',\n  'xml:space',\n  'xmlns:xlink',\n]);\n","import { seal } from './utils';\n\nexport const MUSTACHE_EXPR = seal(/\\{\\{[\\s\\S]*|[\\s\\S]*\\}\\}/gm); // Specify template detection regex for SAFE_FOR_TEMPLATES mode\nexport const ERB_EXPR = seal(/<%[\\s\\S]*|[\\s\\S]*%>/gm);\nexport const DATA_ATTR = seal(/^data-[\\-\\w.\\u00B7-\\uFFFF]/); // eslint-disable-line no-useless-escape\nexport const ARIA_ATTR = seal(/^aria-[\\-\\w]+$/); // eslint-disable-line no-useless-escape\nexport const IS_ALLOWED_URI = seal(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i // eslint-disable-line no-useless-escape\n);\nexport const IS_SCRIPT_OR_DATA = seal(/^(?:\\w+script|data):/i);\nexport const ATTR_WHITESPACE = seal(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g // eslint-disable-line no-control-regex\n);\n","import * as TAGS from './tags';\nimport * as ATTRS from './attrs';\nimport * as EXPRESSIONS from './regexp';\nimport {\n  addToSet,\n  clone,\n  freeze,\n  objectKeys,\n  arrayForEach,\n  arrayIndexOf,\n  arrayJoin,\n  arrayPop,\n  arrayPush,\n  arraySlice,\n  stringMatch,\n  stringReplace,\n  stringToLowerCase,\n  stringIndexOf,\n  stringTrim,\n  regExpTest,\n  regExpCreate,\n  typeErrorCreate,\n} from './utils';\n\nconst getGlobal = () => (typeof window === 'undefined' ? null : window);\n\n/**\n * Creates a no-op policy for internal use only.\n * Don't export this function outside this module!\n * @param {?TrustedTypePolicyFactory} trustedTypes The policy factory.\n * @param {Document} document The document object (to determine policy name suffix)\n * @return {?TrustedTypePolicy} The policy created (or null, if Trusted Types\n * are not supported).\n */\nconst _createTrustedTypesPolicy = function(trustedTypes, document) {\n  if (\n    typeof trustedTypes !== 'object' ||\n    typeof trustedTypes.createPolicy !== 'function'\n  ) {\n    return null;\n  }\n\n  // Allow the callers to control the unique policy name\n  // by adding a data-tt-policy-suffix to the script element with the DOMPurify.\n  // Policy creation with duplicate names throws in Trusted Types.\n  let suffix = null;\n  const ATTR_NAME = 'data-tt-policy-suffix';\n  if (\n    document.currentScript &&\n    document.currentScript.hasAttribute(ATTR_NAME)\n  ) {\n    suffix = document.currentScript.getAttribute(ATTR_NAME);\n  }\n\n  const policyName = 'dompurify' + (suffix ? '#' + suffix : '');\n\n  try {\n    return trustedTypes.createPolicy(policyName, {\n      createHTML(html) {\n        return html;\n      },\n    });\n  } catch (error) {\n    // Policy creation failed (most likely another DOMPurify script has\n    // already run). Skip creating the policy, as this will only cause errors\n    // if TT are enforced.\n    console.warn(\n      'TrustedTypes policy ' + policyName + ' could not be created.'\n    );\n    return null;\n  }\n};\n\nfunction createDOMPurify(window = getGlobal()) {\n  const DOMPurify = root => createDOMPurify(root);\n\n  /**\n   * Version label, exposed for easier checks\n   * if DOMPurify is up to date or not\n   */\n  DOMPurify.version = VERSION;\n\n  /**\n   * Array of elements that DOMPurify removed during sanitation.\n   * Empty if nothing was removed.\n   */\n  DOMPurify.removed = [];\n\n  if (!window || !window.document || window.document.nodeType !== 9) {\n    // Not running in a browser, provide a factory function\n    // so that you can pass your own Window\n    DOMPurify.isSupported = false;\n\n    return DOMPurify;\n  }\n\n  const originalDocument = window.document;\n  let useDOMParser = false;\n  let removeTitle = false;\n\n  let { document } = window;\n  const {\n    DocumentFragment,\n    HTMLTemplateElement,\n    Node,\n    NodeFilter,\n    NamedNodeMap = window.NamedNodeMap || window.MozNamedAttrMap,\n    Text,\n    Comment,\n    DOMParser,\n    trustedTypes,\n  } = window;\n\n  // As per issue #47, the web-components registry is inherited by a\n  // new document created via createHTMLDocument. As per the spec\n  // (http://w3c.github.io/webcomponents/spec/custom/#creating-and-passing-registries)\n  // a new empty registry is used when creating a template contents owner\n  // document, so we use that as our parent document to ensure nothing\n  // is inherited.\n  if (typeof HTMLTemplateElement === 'function') {\n    const template = document.createElement('template');\n    if (template.content && template.content.ownerDocument) {\n      document = template.content.ownerDocument;\n    }\n  }\n\n  const trustedTypesPolicy = _createTrustedTypesPolicy(\n    trustedTypes,\n    originalDocument\n  );\n  const emptyHTML = trustedTypesPolicy ? trustedTypesPolicy.createHTML('') : '';\n\n  const {\n    implementation,\n    createNodeIterator,\n    getElementsByTagName,\n    createDocumentFragment,\n  } = document;\n  const { importNode } = originalDocument;\n\n  let hooks = {};\n\n  /**\n   * Expose whether this browser supports running the full DOMPurify.\n   */\n  DOMPurify.isSupported =\n    implementation &&\n    typeof implementation.createHTMLDocument !== 'undefined' &&\n    document.documentMode !== 9;\n\n  const {\n    MUSTACHE_EXPR,\n    ERB_EXPR,\n    DATA_ATTR,\n    ARIA_ATTR,\n    IS_SCRIPT_OR_DATA,\n    ATTR_WHITESPACE,\n  } = EXPRESSIONS;\n\n  let { IS_ALLOWED_URI } = EXPRESSIONS;\n\n  /**\n   * We consider the elements and attributes below to be safe. Ideally\n   * don't add any new ones but feel free to remove unwanted ones.\n   */\n\n  /* allowed element names */\n  let ALLOWED_TAGS = null;\n  const DEFAULT_ALLOWED_TAGS = addToSet({}, [\n    ...TAGS.html,\n    ...TAGS.svg,\n    ...TAGS.svgFilters,\n    ...TAGS.mathMl,\n    ...TAGS.text,\n  ]);\n\n  /* Allowed attribute names */\n  let ALLOWED_ATTR = null;\n  const DEFAULT_ALLOWED_ATTR = addToSet({}, [\n    ...ATTRS.html,\n    ...ATTRS.svg,\n    ...ATTRS.mathMl,\n    ...ATTRS.xml,\n  ]);\n\n  /* Explicitly forbidden tags (overrides ALLOWED_TAGS/ADD_TAGS) */\n  let FORBID_TAGS = null;\n\n  /* Explicitly forbidden attributes (overrides ALLOWED_ATTR/ADD_ATTR) */\n  let FORBID_ATTR = null;\n\n  /* Decide if ARIA attributes are okay */\n  let ALLOW_ARIA_ATTR = true;\n\n  /* Decide if custom data attributes are okay */\n  let ALLOW_DATA_ATTR = true;\n\n  /* Decide if unknown protocols are okay */\n  let ALLOW_UNKNOWN_PROTOCOLS = false;\n\n  /* Output should be safe for jQuery's $() factory? */\n  let SAFE_FOR_JQUERY = false;\n\n  /* Output should be safe for common template engines.\n   * This means, DOMPurify removes data attributes, mustaches and ERB\n   */\n  let SAFE_FOR_TEMPLATES = false;\n\n  /* Decide if document with <html>... should be returned */\n  let WHOLE_DOCUMENT = false;\n\n  /* Track whether config is already set on this instance of DOMPurify. */\n  let SET_CONFIG = false;\n\n  /* Decide if all elements (e.g. style, script) must be children of\n   * document.body. By default, browsers might move them to document.head */\n  let FORCE_BODY = false;\n\n  /* Decide if a DOM `HTMLBodyElement` should be returned, instead of a html\n   * string (or a TrustedHTML object if Trusted Types are supported).\n   * If `WHOLE_DOCUMENT` is enabled a `HTMLHtmlElement` will be returned instead\n   */\n  let RETURN_DOM = false;\n\n  /* Decide if a DOM `DocumentFragment` should be returned, instead of a html\n   * string  (or a TrustedHTML object if Trusted Types are supported) */\n  let RETURN_DOM_FRAGMENT = false;\n\n  /* If `RETURN_DOM` or `RETURN_DOM_FRAGMENT` is enabled, decide if the returned DOM\n   * `Node` is imported into the current `Document`. If this flag is not enabled the\n   * `Node` will belong (its ownerDocument) to a fresh `HTMLDocument`, created by\n   * DOMPurify. */\n  let RETURN_DOM_IMPORT = false;\n\n  /* Try to return a Trusted Type object instead of a string, retrun a string in\n   * case Trusted Types are not supported  */\n  let RETURN_TRUSTED_TYPE = false;\n\n  /* Output should be free from DOM clobbering attacks? */\n  let SANITIZE_DOM = true;\n\n  /* Keep element content when removing element? */\n  let KEEP_CONTENT = true;\n\n  /* If a `Node` is passed to sanitize(), then performs sanitization in-place instead\n   * of importing it into a new Document and returning a sanitized copy */\n  let IN_PLACE = false;\n\n  /* Allow usage of profiles like html, svg and mathMl */\n  let USE_PROFILES = {};\n\n  /* Tags to ignore content of when KEEP_CONTENT is true */\n  const FORBID_CONTENTS = addToSet({}, [\n    'annotation-xml',\n    'audio',\n    'colgroup',\n    'desc',\n    'foreignobject',\n    'head',\n    'iframe',\n    'math',\n    'mi',\n    'mn',\n    'mo',\n    'ms',\n    'mtext',\n    'noembed',\n    'noframes',\n    'plaintext',\n    'script',\n    'style',\n    'svg',\n    'template',\n    'thead',\n    'title',\n    'video',\n    'xmp',\n  ]);\n\n  /* Tags that are safe for data: URIs */\n  const DATA_URI_TAGS = addToSet({}, [\n    'audio',\n    'video',\n    'img',\n    'source',\n    'image',\n  ]);\n\n  /* Attributes safe for values like \"javascript:\" */\n  let URI_SAFE_ATTRIBUTES = null;\n  const DEFAULT_URI_SAFE_ATTRIBUTES = addToSet({}, [\n    'alt',\n    'class',\n    'for',\n    'id',\n    'label',\n    'name',\n    'pattern',\n    'placeholder',\n    'summary',\n    'title',\n    'value',\n    'style',\n    'xmlns',\n  ]);\n\n  /* Keep a reference to config to pass to hooks */\n  let CONFIG = null;\n\n  /* Ideally, do not touch anything below this line */\n  /* ______________________________________________ */\n\n  const formElement = document.createElement('form');\n\n  /**\n   * _parseConfig\n   *\n   * @param  {Object} cfg optional config literal\n   */\n  // eslint-disable-next-line complexity\n  const _parseConfig = function(cfg) {\n    if (CONFIG && CONFIG === cfg) {\n      return;\n    }\n\n    /* Shield configuration object from tampering */\n    if (!cfg || typeof cfg !== 'object') {\n      cfg = {};\n    }\n\n    /* Set configuration parameters */\n    ALLOWED_TAGS =\n      'ALLOWED_TAGS' in cfg\n        ? addToSet({}, cfg.ALLOWED_TAGS)\n        : DEFAULT_ALLOWED_TAGS;\n    ALLOWED_ATTR =\n      'ALLOWED_ATTR' in cfg\n        ? addToSet({}, cfg.ALLOWED_ATTR)\n        : DEFAULT_ALLOWED_ATTR;\n    URI_SAFE_ATTRIBUTES =\n      'ADD_URI_SAFE_ATTR' in cfg\n        ? addToSet(clone(DEFAULT_URI_SAFE_ATTRIBUTES), cfg.ADD_URI_SAFE_ATTR)\n        : DEFAULT_URI_SAFE_ATTRIBUTES;\n    FORBID_TAGS = 'FORBID_TAGS' in cfg ? addToSet({}, cfg.FORBID_TAGS) : {};\n    FORBID_ATTR = 'FORBID_ATTR' in cfg ? addToSet({}, cfg.FORBID_ATTR) : {};\n    USE_PROFILES = 'USE_PROFILES' in cfg ? cfg.USE_PROFILES : false;\n    ALLOW_ARIA_ATTR = cfg.ALLOW_ARIA_ATTR !== false; // Default true\n    ALLOW_DATA_ATTR = cfg.ALLOW_DATA_ATTR !== false; // Default true\n    ALLOW_UNKNOWN_PROTOCOLS = cfg.ALLOW_UNKNOWN_PROTOCOLS || false; // Default false\n    SAFE_FOR_JQUERY = cfg.SAFE_FOR_JQUERY || false; // Default false\n    SAFE_FOR_TEMPLATES = cfg.SAFE_FOR_TEMPLATES || false; // Default false\n    WHOLE_DOCUMENT = cfg.WHOLE_DOCUMENT || false; // Default false\n    RETURN_DOM = cfg.RETURN_DOM || false; // Default false\n    RETURN_DOM_FRAGMENT = cfg.RETURN_DOM_FRAGMENT || false; // Default false\n    RETURN_DOM_IMPORT = cfg.RETURN_DOM_IMPORT || false; // Default false\n    RETURN_TRUSTED_TYPE = cfg.RETURN_TRUSTED_TYPE || false; // Default false\n    FORCE_BODY = cfg.FORCE_BODY || false; // Default false\n    SANITIZE_DOM = cfg.SANITIZE_DOM !== false; // Default true\n    KEEP_CONTENT = cfg.KEEP_CONTENT !== false; // Default true\n    IN_PLACE = cfg.IN_PLACE || false; // Default false\n    IS_ALLOWED_URI = cfg.ALLOWED_URI_REGEXP || IS_ALLOWED_URI;\n    if (SAFE_FOR_TEMPLATES) {\n      ALLOW_DATA_ATTR = false;\n    }\n\n    if (RETURN_DOM_FRAGMENT) {\n      RETURN_DOM = true;\n    }\n\n    /* Parse profile info */\n    if (USE_PROFILES) {\n      ALLOWED_TAGS = addToSet({}, [...TAGS.text]);\n      ALLOWED_ATTR = [];\n      if (USE_PROFILES.html === true) {\n        addToSet(ALLOWED_TAGS, TAGS.html);\n        addToSet(ALLOWED_ATTR, ATTRS.html);\n      }\n\n      if (USE_PROFILES.svg === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.svgFilters === true) {\n        addToSet(ALLOWED_TAGS, TAGS.svgFilters);\n        addToSet(ALLOWED_ATTR, ATTRS.svg);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n\n      if (USE_PROFILES.mathMl === true) {\n        addToSet(ALLOWED_TAGS, TAGS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.mathMl);\n        addToSet(ALLOWED_ATTR, ATTRS.xml);\n      }\n    }\n\n    /* Merge configuration parameters */\n    if (cfg.ADD_TAGS) {\n      if (ALLOWED_TAGS === DEFAULT_ALLOWED_TAGS) {\n        ALLOWED_TAGS = clone(ALLOWED_TAGS);\n      }\n\n      addToSet(ALLOWED_TAGS, cfg.ADD_TAGS);\n    }\n\n    if (cfg.ADD_ATTR) {\n      if (ALLOWED_ATTR === DEFAULT_ALLOWED_ATTR) {\n        ALLOWED_ATTR = clone(ALLOWED_ATTR);\n      }\n\n      addToSet(ALLOWED_ATTR, cfg.ADD_ATTR);\n    }\n\n    if (cfg.ADD_URI_SAFE_ATTR) {\n      addToSet(URI_SAFE_ATTRIBUTES, cfg.ADD_URI_SAFE_ATTR);\n    }\n\n    /* Add #text in case KEEP_CONTENT is set to true */\n    if (KEEP_CONTENT) {\n      ALLOWED_TAGS['#text'] = true;\n    }\n\n    /* Add html, head and body to ALLOWED_TAGS in case WHOLE_DOCUMENT is true */\n    if (WHOLE_DOCUMENT) {\n      addToSet(ALLOWED_TAGS, ['html', 'head', 'body']);\n    }\n\n    /* Add tbody to ALLOWED_TAGS in case tables are permitted, see #286, #365 */\n    if (ALLOWED_TAGS.table) {\n      addToSet(ALLOWED_TAGS, ['tbody']);\n      delete FORBID_TAGS.tbody;\n    }\n\n    // Prevent further manipulation of configuration.\n    // Not available in IE8, Safari 5, etc.\n    if (freeze) {\n      freeze(cfg);\n    }\n\n    CONFIG = cfg;\n  };\n\n  /**\n   * _forceRemove\n   *\n   * @param  {Node} node a DOM node\n   */\n  const _forceRemove = function(node) {\n    arrayPush(DOMPurify.removed, { element: node });\n    try {\n      node.parentNode.removeChild(node);\n    } catch (error) {\n      node.outerHTML = emptyHTML;\n    }\n  };\n\n  /**\n   * _removeAttribute\n   *\n   * @param  {String} name an Attribute name\n   * @param  {Node} node a DOM node\n   */\n  const _removeAttribute = function(name, node) {\n    try {\n      arrayPush(DOMPurify.removed, {\n        attribute: node.getAttributeNode(name),\n        from: node,\n      });\n    } catch (error) {\n      arrayPush(DOMPurify.removed, {\n        attribute: null,\n        from: node,\n      });\n    }\n\n    node.removeAttribute(name);\n  };\n\n  /**\n   * _initDocument\n   *\n   * @param  {String} dirty a string of dirty markup\n   * @return {Document} a DOM, filled with the dirty markup\n   */\n  const _initDocument = function(dirty) {\n    /* Create a HTML document */\n    let doc;\n    let leadingWhitespace;\n\n    if (FORCE_BODY) {\n      dirty = '<remove></remove>' + dirty;\n    } else {\n      /* If FORCE_BODY isn't used, leading whitespace needs to be preserved manually */\n      const matches = stringMatch(dirty, /^[\\s]+/);\n      leadingWhitespace = matches && matches[0];\n    }\n\n    const dirtyPayload = trustedTypesPolicy\n      ? trustedTypesPolicy.createHTML(dirty)\n      : dirty;\n    /* Use DOMParser to workaround Firefox bug (see comment below) */\n    if (useDOMParser) {\n      try {\n        doc = new DOMParser().parseFromString(dirtyPayload, 'text/html');\n      } catch (error) {}\n    }\n\n    /* Remove title to fix a mXSS bug in older MS Edge */\n    if (removeTitle) {\n      addToSet(FORBID_TAGS, ['title']);\n    }\n\n    /* Otherwise use createHTMLDocument, because DOMParser is unsafe in\n    Safari (see comment below) */\n    if (!doc || !doc.documentElement) {\n      doc = implementation.createHTMLDocument('');\n      const { body } = doc;\n      body.parentNode.removeChild(body.parentNode.firstElementChild);\n      body.outerHTML = dirtyPayload;\n    }\n\n    if (dirty && leadingWhitespace) {\n      doc.body.insertBefore(\n        document.createTextNode(leadingWhitespace),\n        doc.body.childNodes[0] || null\n      );\n    }\n\n    /* Work on whole document or just its body */\n    return getElementsByTagName.call(doc, WHOLE_DOCUMENT ? 'html' : 'body')[0];\n  };\n\n  // Firefox uses a different parser for innerHTML rather than\n  // DOMParser (see https://bugzilla.mozilla.org/show_bug.cgi?id=1205631)\n  // which means that you *must* use DOMParser, otherwise the output may\n  // not be safe if used in a document.write context later.\n  //\n  // So we feature detect the Firefox bug and use the DOMParser if necessary.\n  //\n  // Chrome 77 and other versions ship an mXSS bug that caused a bypass to\n  // happen. We now check for the mXSS trigger and react accordingly.\n  if (DOMPurify.isSupported) {\n    (function() {\n      try {\n        const doc = _initDocument(\n          '<svg><p><textarea><img src=\"</textarea><img src=x abc=1//\">'\n        );\n        if (doc.querySelector('svg img')) {\n          useDOMParser = true;\n        }\n      } catch (error) {}\n    })();\n\n    (function() {\n      try {\n        const doc = _initDocument('<x/><title>&lt;/title&gt;&lt;img&gt;');\n        if (regExpTest(/<\\/title/, doc.querySelector('title').innerHTML)) {\n          removeTitle = true;\n        }\n      } catch (error) {}\n    })();\n  }\n\n  /**\n   * _createIterator\n   *\n   * @param  {Document} root document/fragment to create iterator for\n   * @return {Iterator} iterator instance\n   */\n  const _createIterator = function(root) {\n    return createNodeIterator.call(\n      root.ownerDocument || root,\n      root,\n      NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT | NodeFilter.SHOW_TEXT,\n      () => {\n        return NodeFilter.FILTER_ACCEPT;\n      },\n      false\n    );\n  };\n\n  /**\n   * _isClobbered\n   *\n   * @param  {Node} elm element to check for clobbering attacks\n   * @return {Boolean} true if clobbered, false if safe\n   */\n  const _isClobbered = function(elm) {\n    if (elm instanceof Text || elm instanceof Comment) {\n      return false;\n    }\n\n    if (\n      typeof elm.nodeName !== 'string' ||\n      typeof elm.textContent !== 'string' ||\n      typeof elm.removeChild !== 'function' ||\n      !(elm.attributes instanceof NamedNodeMap) ||\n      typeof elm.removeAttribute !== 'function' ||\n      typeof elm.setAttribute !== 'function' ||\n      typeof elm.namespaceURI !== 'string'\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * _isNode\n   *\n   * @param  {Node} obj object to check whether it's a DOM node\n   * @return {Boolean} true is object is a DOM node\n   */\n  const _isNode = function(obj) {\n    return typeof Node === 'object'\n      ? obj instanceof Node\n      : obj &&\n          typeof obj === 'object' &&\n          typeof obj.nodeType === 'number' &&\n          typeof obj.nodeName === 'string';\n  };\n\n  /**\n   * _executeHook\n   * Execute user configurable hooks\n   *\n   * @param  {String} entryPoint  Name of the hook's entry point\n   * @param  {Node} currentNode node to work on with the hook\n   * @param  {Object} data additional hook parameters\n   */\n  const _executeHook = function(entryPoint, currentNode, data) {\n    if (!hooks[entryPoint]) {\n      return;\n    }\n\n    arrayForEach(hooks[entryPoint], hook => {\n      hook.call(DOMPurify, currentNode, data, CONFIG);\n    });\n  };\n\n  /**\n   * _sanitizeElements\n   *\n   * @protect nodeName\n   * @protect textContent\n   * @protect removeChild\n   *\n   * @param   {Node} currentNode to check for permission to exist\n   * @return  {Boolean} true if node was killed, false if left alive\n   */\n  // eslint-disable-next-line complexity\n  const _sanitizeElements = function(currentNode) {\n    let content;\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeElements', currentNode, null);\n\n    /* Check if element is clobbered or can clobber */\n    if (_isClobbered(currentNode)) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Now let's check the element's type and name */\n    const tagName = stringToLowerCase(currentNode.nodeName);\n\n    /* Execute a hook if present */\n    _executeHook('uponSanitizeElement', currentNode, {\n      tagName,\n      allowedTags: ALLOWED_TAGS,\n    });\n\n    /* Take care of an mXSS pattern using p, br inside svg, math */\n    if (\n      (tagName === 'svg' || tagName === 'math') &&\n      currentNode.querySelectorAll('p, br').length !== 0\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove element if anything forbids its presence */\n    if (!ALLOWED_TAGS[tagName] || FORBID_TAGS[tagName]) {\n      /* Keep content except for black-listed elements */\n      if (\n        KEEP_CONTENT &&\n        !FORBID_CONTENTS[tagName] &&\n        typeof currentNode.insertAdjacentHTML === 'function'\n      ) {\n        try {\n          const htmlToInsert = currentNode.innerHTML;\n          currentNode.insertAdjacentHTML(\n            'AfterEnd',\n            trustedTypesPolicy\n              ? trustedTypesPolicy.createHTML(htmlToInsert)\n              : htmlToInsert\n          );\n        } catch (error) {}\n      }\n\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Remove in case a noscript/noembed XSS is suspected */\n    if (\n      tagName === 'noscript' &&\n      regExpTest(/<\\/noscript/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    if (\n      tagName === 'noembed' &&\n      regExpTest(/<\\/noembed/i, currentNode.innerHTML)\n    ) {\n      _forceRemove(currentNode);\n      return true;\n    }\n\n    /* Convert markup to cover jQuery behavior */\n    if (\n      SAFE_FOR_JQUERY &&\n      !currentNode.firstElementChild &&\n      (!currentNode.content || !currentNode.content.firstElementChild) &&\n      regExpTest(/</g, currentNode.textContent)\n    ) {\n      arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n      if (currentNode.innerHTML) {\n        currentNode.innerHTML = stringReplace(\n          currentNode.innerHTML,\n          /</g,\n          '&lt;'\n        );\n      } else {\n        currentNode.innerHTML = stringReplace(\n          currentNode.textContent,\n          /</g,\n          '&lt;'\n        );\n      }\n    }\n\n    /* Sanitize element content to be template-safe */\n    if (SAFE_FOR_TEMPLATES && currentNode.nodeType === 3) {\n      /* Get the element's text content */\n      content = currentNode.textContent;\n      content = stringReplace(content, MUSTACHE_EXPR, ' ');\n      content = stringReplace(content, ERB_EXPR, ' ');\n      if (currentNode.textContent !== content) {\n        arrayPush(DOMPurify.removed, { element: currentNode.cloneNode() });\n        currentNode.textContent = content;\n      }\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeElements', currentNode, null);\n\n    return false;\n  };\n\n  /**\n   * _isValidAttribute\n   *\n   * @param  {string} lcTag Lowercase tag name of containing element.\n   * @param  {string} lcName Lowercase attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid, otherwise false.\n   */\n  // eslint-disable-next-line complexity\n  const _isValidAttribute = function(lcTag, lcName, value) {\n    /* Make sure attribute cannot clobber */\n    if (\n      SANITIZE_DOM &&\n      (lcName === 'id' || lcName === 'name') &&\n      (value in document || value in formElement)\n    ) {\n      return false;\n    }\n\n    /* Allow valid data-* attributes: At least one character after \"-\"\n        (https://html.spec.whatwg.org/multipage/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes)\n        XML-compatible (https://html.spec.whatwg.org/multipage/infrastructure.html#xml-compatible and http://www.w3.org/TR/xml/#d0e804)\n        We don't need to check the value; it's always URI safe. */\n    if (ALLOW_DATA_ATTR && regExpTest(DATA_ATTR, lcName)) {\n      // This attribute is safe\n    } else if (ALLOW_ARIA_ATTR && regExpTest(ARIA_ATTR, lcName)) {\n      // This attribute is safe\n      /* Otherwise, check the name is permitted */\n    } else if (!ALLOWED_ATTR[lcName] || FORBID_ATTR[lcName]) {\n      return false;\n\n      /* Check value is safe. First, is attr inert? If so, is safe */\n    } else if (URI_SAFE_ATTRIBUTES[lcName]) {\n      // This attribute is safe\n      /* Check no script, data or unknown possibly unsafe URI\n        unless we know URI values are safe for that attribute */\n    } else if (\n      regExpTest(IS_ALLOWED_URI, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Keep image data URIs alive if src/xlink:href is allowed */\n      /* Further prevent gadget XSS for dynamically built script tags */\n    } else if (\n      (lcName === 'src' || lcName === 'xlink:href' || lcName === 'href') &&\n      lcTag !== 'script' &&\n      stringIndexOf(value, 'data:') === 0 &&\n      DATA_URI_TAGS[lcTag]\n    ) {\n      // This attribute is safe\n      /* Allow unknown protocols: This provides support for links that\n        are handled by protocol handlers which may be unknown ahead of\n        time, e.g. fb:, spotify: */\n    } else if (\n      ALLOW_UNKNOWN_PROTOCOLS &&\n      !regExpTest(IS_SCRIPT_OR_DATA, stringReplace(value, ATTR_WHITESPACE, ''))\n    ) {\n      // This attribute is safe\n      /* Check for binary attributes */\n      // eslint-disable-next-line no-negated-condition\n    } else if (!value) {\n      // Binary attributes are safe at this point\n      /* Anything else, presume unsafe, do not add it back */\n    } else {\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * _sanitizeAttributes\n   *\n   * @protect attributes\n   * @protect nodeName\n   * @protect removeAttribute\n   * @protect setAttribute\n   *\n   * @param  {Node} currentNode to sanitize\n   */\n  // eslint-disable-next-line complexity\n  const _sanitizeAttributes = function(currentNode) {\n    let attr;\n    let value;\n    let lcName;\n    let idAttr;\n    let l;\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeAttributes', currentNode, null);\n\n    let { attributes } = currentNode;\n\n    /* Check if we have attributes; if not we might have a text node */\n    if (!attributes) {\n      return;\n    }\n\n    const hookEvent = {\n      attrName: '',\n      attrValue: '',\n      keepAttr: true,\n      allowedAttributes: ALLOWED_ATTR,\n    };\n    l = attributes.length;\n\n    /* Go backwards over all attributes; safely remove bad ones */\n    while (l--) {\n      attr = attributes[l];\n      const { name, namespaceURI } = attr;\n      value = stringTrim(attr.value);\n      lcName = stringToLowerCase(name);\n\n      /* Execute a hook if present */\n      hookEvent.attrName = lcName;\n      hookEvent.attrValue = value;\n      hookEvent.keepAttr = true;\n      hookEvent.forceKeepAttr = undefined; // Allows developers to see this is a property they can set\n      _executeHook('uponSanitizeAttribute', currentNode, hookEvent);\n      value = hookEvent.attrValue;\n      /* Did the hooks approve of the attribute? */\n      if (hookEvent.forceKeepAttr) {\n        continue;\n      }\n\n      /* Remove attribute */\n      // Safari (iOS + Mac), last tested v8.0.5, crashes if you try to\n      // remove a \"name\" attribute from an <img> tag that has an \"id\"\n      // attribute at the time.\n      if (\n        lcName === 'name' &&\n        currentNode.nodeName === 'IMG' &&\n        attributes.id\n      ) {\n        idAttr = attributes.id;\n        attributes = arraySlice(attributes, []);\n        _removeAttribute('id', currentNode);\n        _removeAttribute(name, currentNode);\n        if (arrayIndexOf(attributes, idAttr) > l) {\n          currentNode.setAttribute('id', idAttr.value);\n        }\n      } else if (\n        // This works around a bug in Safari, where input[type=file]\n        // cannot be dynamically set after type has been removed\n        currentNode.nodeName === 'INPUT' &&\n        lcName === 'type' &&\n        value === 'file' &&\n        hookEvent.keepAttr &&\n        (ALLOWED_ATTR[lcName] || !FORBID_ATTR[lcName])\n      ) {\n        continue;\n      } else {\n        // This avoids a crash in Safari v9.0 with double-ids.\n        // The trick is to first set the id to be empty and then to\n        // remove the attribute\n        if (name === 'id') {\n          currentNode.setAttribute(name, '');\n        }\n\n        _removeAttribute(name, currentNode);\n      }\n\n      /* Did the hooks approve of the attribute? */\n      if (!hookEvent.keepAttr) {\n        continue;\n      }\n\n      /* Work around a security issue in jQuery 3.0 */\n      if (SAFE_FOR_JQUERY && regExpTest(/\\/>/i, value)) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Take care of an mXSS pattern using namespace switches */\n      if (\n        regExpTest(/svg|math/i, currentNode.namespaceURI) &&\n        regExpTest(\n          regExpCreate(\n            '</(' + arrayJoin(objectKeys(FORBID_CONTENTS), '|') + ')',\n            'i'\n          ),\n          value\n        )\n      ) {\n        _removeAttribute(name, currentNode);\n        continue;\n      }\n\n      /* Sanitize attribute content to be template-safe */\n      if (SAFE_FOR_TEMPLATES) {\n        value = stringReplace(value, MUSTACHE_EXPR, ' ');\n        value = stringReplace(value, ERB_EXPR, ' ');\n      }\n\n      /* Is `value` valid for this attribute? */\n      const lcTag = currentNode.nodeName.toLowerCase();\n      if (!_isValidAttribute(lcTag, lcName, value)) {\n        continue;\n      }\n\n      /* Handle invalid data-* attribute set by try-catching it */\n      try {\n        if (namespaceURI) {\n          currentNode.setAttributeNS(namespaceURI, name, value);\n        } else {\n          /* Fallback to setAttribute() for browser-unrecognized namespaces e.g. \"x-schema\". */\n          currentNode.setAttribute(name, value);\n        }\n\n        arrayPop(DOMPurify.removed);\n      } catch (error) {}\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeAttributes', currentNode, null);\n  };\n\n  /**\n   * _sanitizeShadowDOM\n   *\n   * @param  {DocumentFragment} fragment to iterate over recursively\n   */\n  const _sanitizeShadowDOM = function(fragment) {\n    let shadowNode;\n    const shadowIterator = _createIterator(fragment);\n\n    /* Execute a hook if present */\n    _executeHook('beforeSanitizeShadowDOM', fragment, null);\n\n    while ((shadowNode = shadowIterator.nextNode())) {\n      /* Execute a hook if present */\n      _executeHook('uponSanitizeShadowNode', shadowNode, null);\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(shadowNode)) {\n        continue;\n      }\n\n      /* Deep shadow DOM detected */\n      if (shadowNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(shadowNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(shadowNode);\n    }\n\n    /* Execute a hook if present */\n    _executeHook('afterSanitizeShadowDOM', fragment, null);\n  };\n\n  /**\n   * Sanitize\n   * Public method providing core sanitation functionality\n   *\n   * @param {String|Node} dirty string or DOM node\n   * @param {Object} configuration object\n   */\n  // eslint-disable-next-line complexity\n  DOMPurify.sanitize = function(dirty, cfg) {\n    let body;\n    let importedNode;\n    let currentNode;\n    let oldNode;\n    let returnNode;\n    /* Make sure we have a string to sanitize.\n      DO NOT return early, as this will return the wrong type if\n      the user has requested a DOM object rather than a string */\n    if (!dirty) {\n      dirty = '<!-->';\n    }\n\n    /* Stringify, in case dirty is an object */\n    if (typeof dirty !== 'string' && !_isNode(dirty)) {\n      // eslint-disable-next-line no-negated-condition\n      if (typeof dirty.toString !== 'function') {\n        throw typeErrorCreate('toString is not a function');\n      } else {\n        dirty = dirty.toString();\n        if (typeof dirty !== 'string') {\n          throw typeErrorCreate('dirty is not a string, aborting');\n        }\n      }\n    }\n\n    /* Check we can run. Otherwise fall back or ignore */\n    if (!DOMPurify.isSupported) {\n      if (\n        typeof window.toStaticHTML === 'object' ||\n        typeof window.toStaticHTML === 'function'\n      ) {\n        if (typeof dirty === 'string') {\n          return window.toStaticHTML(dirty);\n        }\n\n        if (_isNode(dirty)) {\n          return window.toStaticHTML(dirty.outerHTML);\n        }\n      }\n\n      return dirty;\n    }\n\n    /* Assign config vars */\n    if (!SET_CONFIG) {\n      _parseConfig(cfg);\n    }\n\n    /* Clean up removed elements */\n    DOMPurify.removed = [];\n\n    /* Check if dirty is correctly typed for IN_PLACE */\n    if (typeof dirty === 'string') {\n      IN_PLACE = false;\n    }\n\n    if (IN_PLACE) {\n      /* No special handling necessary for in-place sanitization */\n    } else if (dirty instanceof Node) {\n      /* If dirty is a DOM element, append to an empty document to avoid\n         elements being stripped by the parser */\n      body = _initDocument('<!-->');\n      importedNode = body.ownerDocument.importNode(dirty, true);\n      if (importedNode.nodeType === 1 && importedNode.nodeName === 'BODY') {\n        /* Node is already a body, use as is */\n        body = importedNode;\n      } else if (importedNode.nodeName === 'HTML') {\n        body = importedNode;\n      } else {\n        // eslint-disable-next-line unicorn/prefer-node-append\n        body.appendChild(importedNode);\n      }\n    } else {\n      /* Exit directly if we have nothing to do */\n      if (\n        !RETURN_DOM &&\n        !SAFE_FOR_TEMPLATES &&\n        !WHOLE_DOCUMENT &&\n        RETURN_TRUSTED_TYPE &&\n        dirty.indexOf('<') === -1\n      ) {\n        return trustedTypesPolicy\n          ? trustedTypesPolicy.createHTML(dirty)\n          : dirty;\n      }\n\n      /* Initialize the document to work on */\n      body = _initDocument(dirty);\n\n      /* Check we have a DOM node from the data */\n      if (!body) {\n        return RETURN_DOM ? null : emptyHTML;\n      }\n    }\n\n    /* Remove first element node (ours) if FORCE_BODY is set */\n    if (body && FORCE_BODY) {\n      _forceRemove(body.firstChild);\n    }\n\n    /* Get node iterator */\n    const nodeIterator = _createIterator(IN_PLACE ? dirty : body);\n\n    /* Now start iterating over the created document */\n    while ((currentNode = nodeIterator.nextNode())) {\n      /* Fix IE's strange behavior with manipulated textNodes #89 */\n      if (currentNode.nodeType === 3 && currentNode === oldNode) {\n        continue;\n      }\n\n      /* Sanitize tags and elements */\n      if (_sanitizeElements(currentNode)) {\n        continue;\n      }\n\n      /* Shadow DOM detected, sanitize it */\n      if (currentNode.content instanceof DocumentFragment) {\n        _sanitizeShadowDOM(currentNode.content);\n      }\n\n      /* Check attributes, sanitize if necessary */\n      _sanitizeAttributes(currentNode);\n\n      oldNode = currentNode;\n    }\n\n    oldNode = null;\n\n    /* If we sanitized `dirty` in-place, return it. */\n    if (IN_PLACE) {\n      return dirty;\n    }\n\n    /* Return sanitized string or DOM */\n    if (RETURN_DOM) {\n      if (RETURN_DOM_FRAGMENT) {\n        returnNode = createDocumentFragment.call(body.ownerDocument);\n\n        while (body.firstChild) {\n          // eslint-disable-next-line unicorn/prefer-node-append\n          returnNode.appendChild(body.firstChild);\n        }\n      } else {\n        returnNode = body;\n      }\n\n      if (RETURN_DOM_IMPORT) {\n        /* AdoptNode() is not used because internal state is not reset\n               (e.g. the past names map of a HTMLFormElement), this is safe\n               in theory but we would rather not risk another attack vector.\n               The state that is cloned by importNode() is explicitly defined\n               by the specs. */\n        returnNode = importNode.call(originalDocument, returnNode, true);\n      }\n\n      return returnNode;\n    }\n\n    let serializedHTML = WHOLE_DOCUMENT ? body.outerHTML : body.innerHTML;\n\n    /* Sanitize final string template-safe */\n    if (SAFE_FOR_TEMPLATES) {\n      serializedHTML = stringReplace(serializedHTML, MUSTACHE_EXPR, ' ');\n      serializedHTML = stringReplace(serializedHTML, ERB_EXPR, ' ');\n    }\n\n    return trustedTypesPolicy && RETURN_TRUSTED_TYPE\n      ? trustedTypesPolicy.createHTML(serializedHTML)\n      : serializedHTML;\n  };\n\n  /**\n   * Public method to set the configuration once\n   * setConfig\n   *\n   * @param {Object} cfg configuration object\n   */\n  DOMPurify.setConfig = function(cfg) {\n    _parseConfig(cfg);\n    SET_CONFIG = true;\n  };\n\n  /**\n   * Public method to remove the configuration\n   * clearConfig\n   *\n   */\n  DOMPurify.clearConfig = function() {\n    CONFIG = null;\n    SET_CONFIG = false;\n  };\n\n  /**\n   * Public method to check if an attribute value is valid.\n   * Uses last set config, if any. Otherwise, uses config defaults.\n   * isValidAttribute\n   *\n   * @param  {string} tag Tag name of containing element.\n   * @param  {string} attr Attribute name.\n   * @param  {string} value Attribute value.\n   * @return {Boolean} Returns true if `value` is valid. Otherwise, returns false.\n   */\n  DOMPurify.isValidAttribute = function(tag, attr, value) {\n    /* Initialize shared config vars if necessary. */\n    if (!CONFIG) {\n      _parseConfig({});\n    }\n\n    const lcTag = stringToLowerCase(tag);\n    const lcName = stringToLowerCase(attr);\n    return _isValidAttribute(lcTag, lcName, value);\n  };\n\n  /**\n   * AddHook\n   * Public method to add DOMPurify hooks\n   *\n   * @param {String} entryPoint entry point for the hook to add\n   * @param {Function} hookFunction function to execute\n   */\n  DOMPurify.addHook = function(entryPoint, hookFunction) {\n    if (typeof hookFunction !== 'function') {\n      return;\n    }\n\n    hooks[entryPoint] = hooks[entryPoint] || [];\n    arrayPush(hooks[entryPoint], hookFunction);\n  };\n\n  /**\n   * RemoveHook\n   * Public method to remove a DOMPurify hook at a given entryPoint\n   * (pops it from the stack of hooks if more are present)\n   *\n   * @param {String} entryPoint entry point for the hook to remove\n   */\n  DOMPurify.removeHook = function(entryPoint) {\n    if (hooks[entryPoint]) {\n      arrayPop(hooks[entryPoint]);\n    }\n  };\n\n  /**\n   * RemoveHooks\n   * Public method to remove all DOMPurify hooks at a given entryPoint\n   *\n   * @param  {String} entryPoint entry point for the hooks to remove\n   */\n  DOMPurify.removeHooks = function(entryPoint) {\n    if (hooks[entryPoint]) {\n      hooks[entryPoint] = [];\n    }\n  };\n\n  /**\n   * RemoveAllHooks\n   * Public method to remove all DOMPurify hooks\n   *\n   */\n  DOMPurify.removeAllHooks = function() {\n    hooks = {};\n  };\n\n  return DOMPurify;\n}\n\nexport default createDOMPurify();\n"]},"metadata":{},"sourceType":"script"}